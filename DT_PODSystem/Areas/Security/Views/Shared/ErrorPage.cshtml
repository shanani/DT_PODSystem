@model DT_PODSystem.Areas.Security.Models.ViewModels.ErrorPageViewModel
@{
    Layout = null; // Standalone page - no layout dependencies
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <title>@Model.StatusCode - @Model.Title | ED Landing Page</title>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="robots" content="noindex, nofollow" />

    <!-- Core CSS -->
    <link href="~/fonts/fonts.css" rel="stylesheet" />
    <link href="https://ops_cdn.stc.com.sa/ca/css/vendor.min.css" rel="stylesheet" />
    <link href="https://ops_cdn.stc.com.sa/ca/css/material/app.min.css" rel="stylesheet" />
    <link href="~/site/theme.css" rel="stylesheet" />
    <link href="~/site/main.css" rel="stylesheet" />

    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        html, body {
            height: 100%;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        .error-page {
            height: 100vh;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            display: flex;
            align-items: center;
            justify-content: center;
            position: relative;
            overflow: hidden;
        }

            /* Animated background particles */
            .error-page::before {
                content: '';
                position: absolute;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="particles" width="100" height="100" patternUnits="userSpaceOnUse"><circle cx="25" cy="25" r="1" fill="rgba(255,255,255,0.1)"/><circle cx="75" cy="75" r="1.5" fill="rgba(255,255,255,0.08)"/><circle cx="50" cy="10" r="0.5" fill="rgba(255,255,255,0.12)"/><circle cx="20" cy="60" r="0.8" fill="rgba(255,255,255,0.06)"/><circle cx="80" cy="40" r="1.2" fill="rgba(255,255,255,0.09)"/></pattern></defs><rect width="100" height="100" fill="url(%23particles)"/></svg>') repeat;
                opacity: 0.4;
                animation: float 20s ease-in-out infinite;
            }

        @@keyframes float {
            0%, 100% {
                transform: translateY(0px) rotate(0deg);
            }

            33% {
                transform: translateY(-10px) rotate(1deg);
            }

            66% {
                transform: translateY(5px) rotate(-1deg);
            }
        }

        .error-container {
            text-align: center;
            color: white;
            z-index: 10;
            position: relative;
            max-width: 500px;
            margin: 0 auto;
            padding: 20px;
        }

        .error-code {
            font-size: 6rem;
            font-weight: 900;
            line-height: 1;
            margin-bottom: 15px;
            background: linear-gradient(45deg, #fff, rgba(255,255,255,0.8));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            text-shadow: 0 4px 20px rgba(0,0,0,0.2);
            animation: glow 2s ease-in-out infinite alternate;
        }

        @@keyframes glow {
            from {
                filter: drop-shadow(0 0 20px rgba(255,255,255,0.3));
            }

            to {
                filter: drop-shadow(0 0 30px rgba(255,255,255,0.5));
            }
        }

        .error-icon {
            font-size: 3rem;
            margin-bottom: 20px;
            opacity: 0.9;
            animation: bounce 2s infinite;
        }

        @@keyframes bounce {
            0%, 20%, 50%, 80%, 100% {
                transform: translateY(0);
            }

            40% {
                transform: translateY(-10px);
            }

            60% {
                transform: translateY(-5px);
            }
        }

        .error-title {
            font-size: 2rem;
            font-weight: 700;
            margin-bottom: 10px;
            text-shadow: 0 2px 10px rgba(0,0,0,0.3);
        }

        .error-message {
            font-size: 1.1rem;
            margin-bottom: 8px;
            opacity: 0.95;
            font-weight: 500;
        }

        .error-description {
            font-size: 0.95rem;
            opacity: 0.8;
            margin-bottom: 25px;
            line-height: 1.5;
        }

        .action-buttons {
            display: flex;
            gap: 12px;
            justify-content: center;
            flex-wrap: wrap;
            margin-bottom: 20px;
        }

        .btn-custom {
            padding: 10px 25px;
            border-radius: 50px;
            font-weight: 600;
            text-decoration: none;
            transition: all 0.3s ease;
            border: none;
            cursor: pointer;
            display: inline-flex;
            align-items: center;
            gap: 6px;
            font-size: 0.95rem;
        }

        .btn-primary-custom {
            background: linear-gradient(45deg, #fff, rgba(255,255,255,0.9));
            color: #4f008c;
            box-shadow: 0 4px 15px rgba(255,255,255,0.3);
        }

            .btn-primary-custom:hover {
                transform: translateY(-2px);
                box-shadow: 0 6px 20px rgba(255,255,255,0.4);
                color: #4f008c;
            }

        .btn-outline-custom {
            background: transparent;
            color: white;
            border: 2px solid rgba(255,255,255,0.5);
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        }

            .btn-outline-custom:hover {
                background: rgba(255,255,255,0.1);
                border-color: rgba(255,255,255,0.8);
                transform: translateY(-2px);
                color: white;
            }

        .user-info {
            margin-top: 20px;
            padding-top: 20px;
            border-top: 1px solid rgba(255,255,255,0.2);
            font-size: 0.85rem;
            opacity: 0.7;
        }

        /* Mobile responsiveness */
        @@media (max-width: 768px) {
            .error-code {
                font-size: 4.5rem;
            }

            .error-title {
                font-size: 1.6rem;
            }

            .error-message {
                font-size: 1rem;
            }

            .action-buttons {
                flex-direction: column;
                align-items: center;
            }

            .btn-custom {
                width: 200px;
                justify-content: center;
            }
        }

        @@media (max-width: 480px) {
            .error-container {
                padding: 15px;
            }

            .error-code {
                font-size: 3.5rem;
            }
        }
    </style>
</head>
<body>
    <div class="error-page">
        <div class="error-container">
            <!-- Error Icon -->
            <div class="error-icon">
                <i class="@(Model.Icon ?? "fas fa-search")"></i>
            </div>

            <!-- Error Code -->
            <div class="error-code">@Model.StatusCode</div>

            <!-- Error Content -->
            <h1 class="error-title">@Model.Title</h1>
            <div class="error-message">@Model.Message</div>
            <div class="error-description">@Model.Description</div>

            <!-- Action Buttons -->
            <div class="action-buttons">
                @if (!string.IsNullOrEmpty(Model.HomePage))
                {
                    <a href="@Model.HomePage" class="btn-custom btn-primary-custom">
                        <i class="fas fa-home"></i>
                        Go Home
                    </a>
                }
                else
                {
                    <a href="/" class="btn-custom btn-primary-custom">
                        <i class="fas fa-home"></i>
                        Go Home
                    </a>
                }

                <button onclick="history.back()" class="btn-custom btn-outline-custom">
                    <i class="fas fa-arrow-left"></i>
                    Go Back
                </button>
            </div>

            <!-- User Information (Development/Debug) -->
            @if (Model.ShowDetails && Model.IsAuthenticated)
            {
                <div class="user-info">
                    <div><strong>User:</strong> @Model.UserDisplayName (@Model.UserCode)</div>
                    @if (!string.IsNullOrEmpty(Model.OriginalPath))
                    {
                        <div><strong>Path:</strong> @Model.OriginalPath</div>
                    }
                </div>
            }

            <!-- Support Contact -->
            @if (!string.IsNullOrEmpty(Model.SupportEmail) || !string.IsNullOrEmpty(Model.SupportPhone))
            {
                <div class="user-info">
                    <div><i class="fas fa-question-circle me-1"></i> Need help?</div>
                    @if (!string.IsNullOrEmpty(Model.SupportEmail))
                    {
                        <div><a href="mailto:@Model.SupportEmail" class="text-white">@Model.SupportEmail</a></div>
                    }
                    @if (!string.IsNullOrEmpty(Model.SupportPhone))
                    {
                        <div><a href="tel:@Model.SupportPhone" class="text-white">@Model.SupportPhone</a></div>
                    }
                </div>
            }
        </div>
    </div>

    <!-- Auto-redirect functionality -->
    @if (Model.RedirectAfterSeconds > 0 && !string.IsNullOrEmpty(Model.HomePage))
    {
        <script>
            let countdown = @Model.RedirectAfterSeconds;

            // Add countdown display
            setTimeout(() => {
                const description = document.querySelector('.error-description');
                const countdownSpan = document.createElement('span');
                countdownSpan.id = 'countdown';
                countdownSpan.textContent = countdown;

                const redirectText = document.createElement('div');
                redirectText.innerHTML = `<br>Redirecting to home page in <span id="countdown-display">${countdown}</span> seconds...`;
                redirectText.style.fontSize = '0.9rem';
                redirectText.style.marginTop = '15px';
                description.appendChild(redirectText);

                const updateCountdown = () => {
                    countdown--;
                    document.getElementById('countdown-display').textContent = countdown;
                    if (countdown <= 0) {
                        window.location.href = '@Model.HomePage';
                    }
                };

                setInterval(updateCountdown, 1000);
            }, 2000);
        </script>
    }

    <script>
        // Add interactive feedback
        document.querySelectorAll('.btn-custom').forEach(element => {
            element.addEventListener('mouseenter', function() {
                this.style.transform = 'translateY(-2px)';
            });

            element.addEventListener('mouseleave', function() {
                this.style.transform = 'translateY(0)';
            });
        });
    </script>
</body>
</html>