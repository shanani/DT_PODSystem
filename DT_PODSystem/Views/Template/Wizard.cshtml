@model DT_PODSystem.Models.ViewModels.TemplateWizardViewModel
@{
    ViewData["Title"] = "Template Wizard";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@section Styles {
    <link href="https://ops_cdn.stc.com.sa/ca/plugins/dropzone/dist/min/dropzone.min.css" rel="stylesheet" />
    <link href="~/site/template-wizard.css" rel="stylesheet" />
}

<div class="main-wizard-wrapper">
    <div class="nav-wizards-container">
        <nav class="nav nav-wizards-1 mb-2">
            @for (int i = 1; i <= 3; i++)
            {
                var step = Model.Steps.FirstOrDefault(s => s.StepNumber == i);
                var stepClass = "";
                if (i < Model.CurrentStep) { stepClass = "completed"; }
                else if (i == Model.CurrentStep) { stepClass = "active"; }
                else { stepClass = "disabled"; }
                if (step != null && step.HasErrors) { stepClass += " error"; }
                <div class="nav-item col">
                    <a class="nav-link @stepClass" href="#" onclick="navigateToStep(@i)" data-accessible="@(step?.IsAccessible ?? false)">
                        <div class="nav-no">@i</div>
                        <div class="nav-text">@(step?.Title ?? GetStepTitle(i))</div>
                    </a>
                </div>
            }
        </nav>
    </div>

    <div class="card">
        <div class="card-body wizard-step-content" id="wizard-step-content">
            @{
                switch (Model.CurrentStep)
                {
                    case 1:
                        <partial name="Step1-Upload" model="Model.Step1" />
                        break;
                    case 2:
                        <partial name="Step2-TemplateDetails" model="Model.Step2" />
                        break;
                    case 3:
                        <partial name="Step3-Mapping" model="Model.Step3" />
                        break;

                    default:
                        <div class="text-center p-5">
                            <h4>Step @Model.CurrentStep</h4>
                            <p class="text-muted">Step content not available</p>
                        </div>
                        break;
                }
            }
        </div>
        <div class="card-footer wizard-actions">
            <div class="d-flex justify-content-between align-items-center">              

                <!-- Right side - Navigation buttons -->
                <div class="d-flex gap-2">
                    <!-- Previous Button -->
                    <button type="button" class="btn btn-outline-secondary" id="prev-step-btn"
                            style="@(Model.CurrentStep <= 1 ? "display: none;" : "")"
                            onclick="previousStep()">
                        <i class="fa fa-arrow-left me-2"></i>Previous
                    </button>

                    <!-- Next Button -->
                    @if (Model.CurrentStep < 3)
                    {
                        <button type="button" class="btn btn-primary" id="next-step-btn" onclick="nextStep()">
                            Next<i class="fa fa-arrow-right ms-2"></i>
                        </button>
                    }

                    <!-- Finish Button (only on last step) -->
                    @if (Model.CurrentStep == 3)
                    {
                        <button type="button" class="btn btn-green" id="finish-btn" onclick="finishWizard()">
                            <i class="fa fa-check me-2"></i>Create Template
                        </button>
                    }

                    <!-- Save & Exit Button -->
                    <button type="button" class="btn btn-outline-warning" id="save-exit-btn" onclick="saveAndExit()">
                        <i class="fa fa-save me-2"></i>Save & Exit
                    </button>
                </div>
            </div>
        </div>
    </div>

    <div class="mt-3">
        <div class="progress" style="height: 6px;">
            <div class="progress-bar bg-primary" role="progressbar" style="width: @((Model.CurrentStep * 100) / 3)%"></div>
        </div>
        <div class="d-flex justify-content-between mt-1">
            <small class="text-muted">Step @Model.CurrentStep of 3</small>
            <small class="text-muted">@((Model.CurrentStep * 100) / 3)% Complete</small>
        </div>
    </div>
</div>



@section Scripts {

    <script src="https://ops_cdn.stc.com.sa/ca/plugins/dropzone/dist/min/dropzone.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js"></script>

    <!-- Pass server data to JavaScript -->
    <script>
        // Pass server data to JavaScript with explicit values
        window.serverWizardData = @Html.Raw(Json.Serialize(Model));

        // ✅ FIX: Explicitly set critical values that might not serialize
        if (window.serverWizardData) {
            window.serverWizardData.currentStep = @Model.CurrentStep;
            window.serverWizardData.templateId = @Model.TemplateId;
            window.serverWizardData.totalSteps = 3;

            // ✅ KEEP THIS FIX: Ensure step1Data structure exists with files
            window.serverWizardData.step1Data = window.serverWizardData.step1Data || {};
            window.serverWizardData.step1Data.uploadedFiles = window.serverWizardData.step1?.uploadedFiles || [];
        }

        @if (Model.CurrentStep == 3)
        {
                <text>
                    if (window.serverWizardData) {
                        window.serverWizardData.Step3 = window.serverWizardData.Step3 || {};
                        window.serverWizardData.Step3.FieldMappings = @Html.Raw(Json.Serialize(Model.Step3.FieldMappings));
                        window.serverWizardData.Step3.TemplateAnchors = @Html.Raw(Json.Serialize(Model.Step3.TemplateAnchors));
                    }
                </text>
        }
    </script>

    <!-- Core wizard JavaScript files -->
    <script src="~/site/wizard-changes-detection.js"></script>
    <script src="~/site/wizard-shared.js"></script>

    <!-- Step-specific JavaScript -->
    @if (Model.CurrentStep == 1)
    {
        <script src="~/site/wizard-step1.js"></script>
    }
    @if (Model.CurrentStep == 2)
    {
        <script src="~/site/wizard-step2.js"></script>
    }
    @if (Model.CurrentStep == 3)
    {
        <script src="~/site/wizard-step3-bullk-add.js"></script>
        <script src="~/site/wizard-step3-multiselect.js"></script>
        <script src="~/site/wizard-step3.js"></script>
    }
}

@{
    string GetStepTitle(int stepNumber)
    {
        return stepNumber switch
        {
            1 => "Upload PDF",
            2 => "Template Details",
            3 => "Map Fields & Finalize",
            _ => $"Step {stepNumber}"
        };
    }
}