@model DT_PODSystem.Models.ViewModels.LookupsViewModel

@{
    ViewData["Title"] = "Manage Categories";
    Layout = "_Layout";
}

@section Styles {
    <link href="https://ops_cdn.stc.com.sa/ca/plugins/datatables.net-bs5/css/dataTables.bootstrap5.min.css" rel="stylesheet" />
    <link href="https://ops_cdn.stc.com.sa/ca/plugins/datatables.net-responsive-bs5/css/responsive.bootstrap5.min.css" rel="stylesheet" />
}

<!-- BEGIN breadcrumb -->
<ol class="breadcrumb">
    <li class="breadcrumb-item"><a href="@Url.Action("Index", "Home")">Dashboard</a></li>
    <li class="breadcrumb-item"><a href="@Url.Action("Index", "Home")">Lookups</a></li>
    <li class="breadcrumb-item active">Categories</li>
</ol>
<!-- END breadcrumb -->
<!-- BEGIN page-header -->
<h1 class="page-header">Manage Categories <small>Document template categories</small></h1>
<!-- END page-header -->
<!-- BEGIN panel -->
<div class="panel panel-inverse">
    <div class="panel-heading">
        <h4 class="panel-title">Categories</h4>
        <div class="panel-heading-btn">
            <button type="button" class="btn btn-success btn-sm" onclick="showCreateModal()">
                <i class="fa fa-plus"></i> Add Category
            </button>
        </div>
    </div>
    <div class="panel-body">
        <table id="categoriesTable" class="table table-striped table-bordered align-middle text-nowrap">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Description</th>
                    <th>Display Order</th>
                    <th>Status</th>
                    <th>Templates</th>
                    <th width="200">Actions</th>
                </tr>
            </thead>
            <tbody>
                <!-- Data will be loaded via AJAX -->
            </tbody>
        </table>
    </div>
</div>
<!-- END panel -->
<!-- Category Modal -->
<div class="modal fade" id="categoryModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="categoryModalTitle">Add Category</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form id="categoryForm">
                <div class="modal-body">
                    <input type="hidden" id="categoryId" value="0" />

                    <div class="row mb-3">
                        <div class="col-md-8">
                            <label for="categoryName" class="form-label">Category Name <span class="text-danger">*</span></label>
                            <input type="text" class="form-control" id="categoryName" maxlength="200" required />
                            <div class="invalid-feedback"></div>
                        </div>
                        <div class="col-md-4">
                            <label for="categoryDisplayOrder" class="form-label">Display Order</label>
                            <input type="number" class="form-control" id="categoryDisplayOrder" min="1" max="999" value="1" />
                            <div class="form-text">Lower numbers appear first</div>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label for="categoryDescription" class="form-label">Description</label>
                        <textarea class="form-control" id="categoryDescription" rows="3" maxlength="500"></textarea>
                        <div class="form-text">Optional description for the category</div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-success" id="saveCategoryBtn">
                        <i class="fa fa-save"></i> Save Category
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Usage Details Modal -->
<div class="modal fade" id="usageModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Usage Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="usageModalBody">
                <div class="text-center">
                    <i class="fa fa-spinner fa-spin fa-2x"></i>
                    <p class="mt-2">Loading usage details...</p>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://ops_cdn.stc.com.sa/ca/plugins/datatables.net/js/dataTables.min.js"></script>
    <script src="https://ops_cdn.stc.com.sa/ca/plugins/datatables.net-bs5/js/dataTables.bootstrap5.min.js"></script>
    <script src="https://ops_cdn.stc.com.sa/ca/plugins/datatables.net-responsive/js/dataTables.responsive.min.js"></script>
    <script src="https://ops_cdn.stc.com.sa/ca/plugins/datatables.net-responsive-bs5/js/responsive.bootstrap5.min.js"></script>

    <script>
        let categoriesTable;

        $(document).ready(function() {
            // Wait for DataTables to be fully loaded
            if (typeof $.fn.DataTable === 'undefined') {
                console.error('DataTables not loaded');
                return;
            }

            initializeDataTable();
            setupFormValidation();
            setupEventHandlers();
            loadTemplatesCounts();
        });

        function initializeDataTable() {
            try {
                categoriesTable = $('#categoriesTable').DataTable({
                    responsive: {
                        details: {
                            type: 'column',
                            target: 'tr'
                        }
                    },
                    processing: true,
                    ajax: {
                        url: '/Lookups/GetCategoriesData',
                        type: 'GET',
                        dataSrc: 'data'
                    },
                    columns: [
                        {
                            data: 'name',
                            render: function(data) {
                                return `<strong>${data}</strong>`;
                            }
                        },
                        {
                            data: 'description',
                            render: function(data) {
                                return data || '-';
                            }
                        },
                        { data: 'displayOrder' },
                        {
                            data: 'isActive',
                            render: function(data) {
                                return data ?
                                    '<span class="badge bg-success">Active</span>' :
                                    '<span class="badge bg-secondary">Inactive</span>';
                            }
                        },
                        {
                            data: 'templateCount',
                            render: function(data) {
                                return `<span class="badge bg-primary">${data || 0}</span>`;
                            }
                        },
                        {
                            data: null,
                            orderable: false,
                            render: function(data, type, row) {
                                return `
                                    <div class="btn-group">
                                        <button type="button" class="btn btn-sm btn-outline-primary" onclick="showEditModal(${row.id})">
                                            <i class="fa fa-edit"></i>
                                        </button>
                                        <button type="button" class="btn btn-sm btn-outline-info" onclick="showUsageDetails('category', ${row.id})">
                                            <i class="fa fa-info-circle"></i>
                                        </button>
                                        <button type="button" class="btn btn-sm btn-outline-warning" onclick="toggleStatus('category', ${row.id})">
                                            <i class="fa fa-toggle-on"></i>
                                        </button>
                                        <button type="button" class="btn btn-sm btn-outline-danger" onclick="deleteEntity('category', ${row.id}, '${row.name}')">
                                            <i class="fa fa-trash"></i>
                                        </button>
                                    </div>
                                `;
                            }
                        }
                    ],
                    pageLength: 25,
                    order: [[2, 'asc'], [0, 'asc']], // Display Order, then Name
                    language: {
                        search: "Search categories:",
                        lengthMenu: "Show _MENU_ categories per page",
                        info: "Showing _START_ to _END_ of _TOTAL_ categories",
                        infoEmpty: "No categories found",
                        emptyTable: "No categories available"
                    }
                });
            } catch (error) {
                console.error('DataTable initialization error:', error);
                // Fallback: keep current static table
                categoriesTable = $('#categoriesTable').DataTable({
                    pageLength: 25,
                    order: [[2, 'asc'], [0, 'asc']],
                    columnDefs: [
                        { orderable: false, targets: [5] }
                    ]
                });
            }
        }

        function setupFormValidation() {
            $('#categoryForm').on('submit', function(e) {
                e.preventDefault();

                if (validateForm()) {
                    saveCategory();
                }
            });

            // Real-time validation
            $('#categoryName').on('blur', function() {
                validateField('categoryName', 'name');
            });
        }

        function setupEventHandlers() {
            // Modal events
            $('#categoryModal').on('hidden.bs.modal', function() {
                resetForm();
            });
        }

        function showCreateModal() {
            resetForm();
            $('#categoryModalTitle').text('Add Category');
            $('#saveCategoryBtn').html('<i class="fa fa-save"></i> Save Category');
            $('#categoryModal').modal('show');
            setTimeout(() => $('#categoryName').focus(), 500);
        }

        function showEditModal(id) {
            resetForm();
            $('#categoryModalTitle').text('Edit Category');
            $('#saveCategoryBtn').html('<i class="fa fa-save"></i> Update Category');

            // Load category data
            $.get(`/Lookups/GetCategory/${id}`)
                .done(function(response) {
                    if (response.success) {
                        const category = response.data;
                        $('#categoryId').val(category.id);
                        $('#categoryName').val(category.name);
                        $('#categoryDescription').val(category.description || '');
                        $('#categoryDisplayOrder').val(category.displayOrder);
                        $('#categoryModal').modal('show');
                        setTimeout(() => $('#categoryName').focus(), 500);
                    } else {
                        alert.error('Failed to load category');
                    }
                })
                .fail(function() {
                    alert.error('Failed to load category data');
                });
        }

        function saveCategory() {
            const categoryData = {
                id: parseInt($('#categoryId').val()),
                name: $('#categoryName').val().trim(),
                description: $('#categoryDescription').val().trim(),
                displayOrder: parseInt($('#categoryDisplayOrder').val())
            };

            const isEdit = categoryData.id > 0;
            const url = isEdit ? '/Lookups/UpdateCategory' : '/Lookups/CreateCategory';

            $('#saveCategoryBtn').prop('disabled', true).html('<i class="fa fa-spinner fa-spin"></i> Saving...');

            $.ajax({
                url: url,
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(categoryData),
                headers: {
                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                }
            })
            .done(function(response) {
                if (response.success) {
                    alert.success(response.message);
                    $('#categoryModal').modal('hide');
                    categoriesTable.ajax.reload(null, false); // Reload DataTable without resetting pagination
                } else {
                    alert.error(response.message);
                }
            })
            .fail(function() {
                alert.error('Failed to save category');
            })
            .always(function() {
                $('#saveCategoryBtn').prop('disabled', false).html('<i class="fa fa-save"></i> Save Category');
            });
        }

        function deleteEntity(entityType, id, name) {
            swal({
                title: 'Delete Category?',
                text: `Are you sure you want to delete "${name}"? This action cannot be undone.`,
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Delete',
                cancelButtonText: 'Cancel',
                closeOnEsc: true
            }).then((result) => {
                if (result.value) {
                    $.post('/Lookups/DeleteCategory', {
                        id: id,
                        __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                    })
                        .done(function(response) {
                            if (response.success) {
                                alert.success(response.message);
                                categoriesTable.ajax.reload(null, false);
                            } else {
                                alert.error(response.message);
                            }
                        })
                        .fail(function() {
                            alert.error('Failed to delete category');
                        });
                }
            });
        }

        function toggleStatus(entityType, id) {
            $.post('/Lookups/ToggleStatus', {
                entityType: entityType,
                id: id,
                __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
            })
                .done(function(response) {
                    if (response.success) {
                        alert.success(response.message);
                        categoriesTable.ajax.reload(null, false);
                    } else {
                        alert.error(response.message);
                    }
                })
                .fail(function() {
                    alert.error('Failed to update status');
                });
        }

        function showUsageDetails(entityType, id) {
            $('#usageModal').modal('show');

            $.get(`/Lookups/GetUsageDetails?entityType=${entityType}&id=${id}`)
                .done(function(response) {
                    if (response.success) {
                        const usage = response.data;
                        let html = `
                            <div class="row">
                                <div class="col-md-6">
                                    <h6><strong>${usage.lookupName}</strong></h6>
                                    <p class="text-muted">${entityType.charAt(0).toUpperCase() + entityType.slice(1)}</p>
                                </div>
                                <div class="col-md-6 text-end">
                                    <span class="badge ${usage.isInUse ? 'bg-warning' : 'bg-success'} fs-6">
                                        ${usage.isInUse ? 'In Use' : 'Not Used'}
                                    </span>
                                </div>
                            </div>
                            <hr />
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="text-center">
                                        <h4 class="text-primary">${usage.totalUsageCount}</h4>
                                        <small class="text-muted">Total Usage</small>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="text-center">
                                        <h4 class="${usage.canBeDeleted ? 'text-success' : 'text-danger'}">
                                            ${usage.canBeDeleted ? 'Yes' : 'No'}
                                        </h4>
                                        <small class="text-muted">Can Delete</small>
                                    </div>
                                </div>
                            </div>`;

                        if (usage.dependencies.length > 0) {
                            html += `
                                <hr />
                                <h6>Dependencies:</h6>
                                <ul class="list-unstyled">`;
                            usage.dependencies.forEach(dep => {
                                html += `<li><i class="fa fa-arrow-right text-muted me-2"></i>${dep}</li>`;
                            });
                            html += `</ul>`;
                        }

                        $('#usageModalBody').html(html);
                    } else {
                        $('#usageModalBody').html('<div class="alert alert-danger">Failed to load usage details</div>');
                    }
                })
                .fail(function() {
                    $('#usageModalBody').html('<div class="alert alert-danger">Error loading usage details</div>');
                });
        }

        function validateForm() {
            let isValid = true;

            // Reset validation states
            $('.is-invalid').removeClass('is-invalid');
            $('.invalid-feedback').text('');

            // Required fields
            if (!$('#categoryName').val().trim()) {
                markFieldInvalid('categoryName', 'Category name is required');
                isValid = false;
            }

            return isValid;
        }

        function validateField(fieldId, fieldType) {
            const value = $(`#${fieldId}`).val().trim();
            const entityId = $('#categoryId').val();

            if (value) {
                $.get(`/Lookups/Validate${fieldType.charAt(0).toUpperCase() + fieldType.slice(1)}?entityType=category&${fieldType}=${encodeURIComponent(value)}&excludeId=${entityId}`)
                    .done(function(isUnique) {
                        if (!isUnique) {
                            markFieldInvalid(fieldId, `This ${fieldType} is already in use`);
                        } else {
                            markFieldValid(fieldId);
                        }
                    })
                    .fail(function() {
                        // Ignore validation errors for now
                        markFieldValid(fieldId);
                    });
            }
        }

        function markFieldInvalid(fieldId, message) {
            $(`#${fieldId}`).addClass('is-invalid');
            $(`#${fieldId}`).siblings('.invalid-feedback').text(message);
        }

        function markFieldValid(fieldId) {
            $(`#${fieldId}`).removeClass('is-invalid').addClass('is-valid');
            $(`#${fieldId}`).siblings('.invalid-feedback').text('');
        }

        function resetForm() {
            $('#categoryForm')[0].reset();
            $('#categoryId').val('0');
            $('.is-invalid, .is-valid').removeClass('is-invalid is-valid');
            $('.invalid-feedback').text('');
            $('#categoryDisplayOrder').val('1');
        }

        // Remove the custom alert function since we're using existing system
        function loadTemplatesCounts() {
            // This would be loaded via API call to get template counts per category
            // For now, we'll just show 0
        }
    </script>
}

@section ValidationScripts {
    @Html.AntiForgeryToken()
}