@model DT_PODSystem.Models.ViewModels.PODListViewModel

@{
    ViewData["Title"] = "Manage PODs";
    Layout = "_Layout";
}

@section Styles {
    <link href="https://ops_cdn.stc.com.sa/ca/plugins/datatables.net-bs5/css/dataTables.bootstrap5.min.css" rel="stylesheet" />
    <link href="https://ops_cdn.stc.com.sa/ca/plugins/datatables.net-responsive-bs5/css/responsive.bootstrap5.min.css" rel="stylesheet" />
    <style>
        /* Enhanced Card View Styles */
        .pod-card {
            background: white;
            border: 1px solid #e3e6f0;
            border-radius: 1rem;
            padding: 1.5rem;
            margin-bottom: 1.5rem;
            transition: all 0.3s ease;
            position: relative;
            box-shadow: 0 0.15rem 1.75rem 0 rgba(58, 59, 69, 0.15);
        }

            .pod-card:hover {
                box-shadow: 0 0.5rem 2rem 0 rgba(58, 59, 69, 0.3);
                transform: translateY(-5px);
            }

        .pod-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            margin-bottom: 1.25rem;
            min-height: 3rem;
        }

        .pod-title-section {
            flex: 1;
            padding-right: 3rem;
        }

        .pod-title {
            color: #2c3e50;
            font-weight: 700;
            font-size: 1.25rem;
            margin-bottom: 0.5rem;
            line-height: 1.3;
        }

        .pod-code {
            color: #6c757d;
            font-family: 'Monaco', 'Menlo', monospace;
            font-size: 0.8rem;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 0.25rem 0.75rem;
            border-radius: 1rem;
            display: inline-block;
        }

        .pod-description {
            color: #6c757d;
            font-size: 0.9rem;
            margin-bottom: 1.5rem;
            line-height: 1.5;
            display: -webkit-box;
            -webkit-line-clamp: 2;
            -webkit-box-orient: vertical;
            overflow: hidden;
        }

        .pod-meta {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 1rem;
            margin-bottom: 1.5rem;
            background: #f8f9fa;
            padding: 1rem;
            border-radius: 0.75rem;
            border-left: 4px solid #007bff;
        }

        .meta-item {
            display: flex;
            flex-direction: column;
        }

        .meta-label {
            font-size: 0.7rem;
            color: #6c757d;
            text-transform: uppercase;
            font-weight: 600;
            letter-spacing: 0.5px;
            margin-bottom: 0.25rem;
        }

        .meta-value {
            font-size: 0.9rem;
            color: #2c3e50;
            font-weight: 600;
        }

        .pod-badges {
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
            margin-bottom: 1.5rem;
        }

        .pod-footer {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding-top: 1rem;
            border-top: 2px solid #e9ecef;
            font-size: 0.85rem;
            color: #6c757d;
        }

        .footer-item {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        /* Enhanced Cog Dropdown */
        .actions-dropdown {
            position: relative;
            flex-shrink: 0;
        }

        .cog-btn {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border: none;
            color: white;
            font-size: 1rem;
            padding: 0.75rem;
            border-radius: 50%;
            transition: all 0.3s ease;
            box-shadow: 0 2px 10px rgba(102, 126, 234, 0.3);
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

            .cog-btn:hover {
                transform: rotate(90deg);
                box-shadow: 0 4px 20px rgba(102, 126, 234, 0.5);
            }

        .dropdown-menu {
            border: none;
            border-radius: 1rem;
            box-shadow: 0 1rem 3rem rgba(0, 0, 0, 0.175);
            padding: 0.5rem 0;
            min-width: 180px;
        }

        .dropdown-item {
            padding: 0.75rem 1.25rem;
            font-size: 0.875rem;
            display: flex;
            align-items: center;
            gap: 0.75rem;
            border: none;
            transition: all 0.2s ease;
        }

            .dropdown-item:hover {
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                transform: translateX(5px);
            }

            .dropdown-item i {
                width: 18px;
                text-align: center;
                font-size: 1rem;
            }

        /* Enhanced badges */
        .badge {
            padding: 0.5rem 1rem;
            font-size: 0.75rem;
            font-weight: 600;
            border-radius: 50px;
        }

        /* Filter Panel Styles */
        .filter-widget {
            background: white;
            border: 1px solid #e3e6f0;
            border-radius: 1rem;
            padding: 1.5rem;
            margin-bottom: 1.5rem;
            box-shadow: 0 0.15rem 1.75rem 0 rgba(58, 59, 69, 0.15);
        }

        .filter-title {
            color: #2c3e50;
            font-weight: 700;
            font-size: 1.1rem;
            margin-bottom: 1.25rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .view-toggle {
            display: inline-flex;
            background: #f8f9fa;
            border-radius: 0.5rem;
            padding: 0.25rem;
            border: 1px solid #dee2e6;
        }

        .view-btn {
            padding: 0.5rem 1rem;
            border: none;
            background: transparent;
            border-radius: 0.375rem;
            color: #6c757d;
            transition: all 0.3s ease;
            font-weight: 600;
            font-size: 0.875rem;
        }

            .view-btn.active {
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                box-shadow: 0 2px 8px rgba(102, 126, 234, 0.3);
            }

        .results-info {
            background: #f8f9fa;
            border-radius: 0.5rem;
            padding: 1rem;
            border-left: 4px solid #007bff;
            margin-bottom: 1rem;
        }

        .total-count {
            font-size: 1.25rem;
            font-weight: 700;
            color: #2c3e50;
        }

        .filter-summary {
            font-size: 0.875rem;
            color: #6c757d;
            margin-top: 0.5rem;
        }

        /* List view DataTable container */

        /* Small badges for table view */
        .badge-sm {
            font-size: 0.65rem;
            padding: 0.25rem 0.5rem;
            line-height: 1;
        }

        /* Make table badges even more compact */
        #podsTable .badge {
            font-size: 0.6rem;
            padding: 0.2rem 0.4rem;
            border-radius: 0.25rem;
            font-weight: 500;
            line-height: 1.2;
        }

        /* Ensure small badges stay small */
        #podsTable .badge-sm {
            font-size: 0.55rem;
            padding: 0.15rem 0.35rem;
        }
    </style>
}

<!-- BEGIN breadcrumb -->
<ol class="breadcrumb">
    <li class="breadcrumb-item"><a href="@Url.Action("Index", "Home")">Dashboard</a></li>
    <li class="breadcrumb-item active">POD Management</li>
</ol>
<!-- END breadcrumb -->
<!-- BEGIN page-header -->
<h1 class="page-header">POD Management <small>POD Cetificate Managment</small>
    <!-- Create Button -->
    <a href="@Url.Action("Create")" class="btn btn-green btn-sm float-end">
        <i class="fa fa-plus"></i> Create New POD
    </a>
</h1>
<!-- END page-header -->
<!-- BEGIN panel -->
<div class="panel panel-inverse">
    <div class="panel-heading">
        <h4 class="panel-title">PODs List - <span id="totalCount">@(Model.PODs?.Count() ?? 0)</span> Found</h4>
        <div class="panel-heading-btn">
            <!-- View Toggle -->
            <div class="btn-group me-2" role="group">
                <button type="button" id="cardViewBtn" class="btn btn-xs btn-muted">
                    <i class="fa fa-th-large"></i> Cards
                </button>
                <button type="button" id="listViewBtn" class="btn btn-xs btn-outline-muted">
                    <i class="fa fa-list"></i> List
                </button>
            </div>
             
        </div>
    </div>

    <!-- Filter Bar -->
    <div class="panel-body py-2 border-bottom">
        <div class="row align-items-center">
            <!-- Search Input -->
            <div class="col-lg-3 col-md-4 mb-2">
                <div class="input-group input-group-sm">
                    <input type="text" id="searchFilter" class="form-control" placeholder="Search PODs...">
                    <span class="input-group-text"><i class="fa fa-search"></i></span>
                </div>
            </div>

            <!-- Filters -->
            <div class="col-lg-2 col-md-3 mb-2">
                <select id="categoryFilter" class="form-select form-select-sm">
                    <option value="">All Categories</option>
                </select>
            </div>

            <div class="col-lg-2 col-md-3 mb-2">
                <select id="vendorFilter" class="form-select form-select-sm">
                    <option value="">All Vendors</option>
                </select>
            </div>

            <div class="col-lg-2 col-md-3 mb-2">
                <select id="departmentFilter" class="form-select form-select-sm">
                    <option value="">All Departments</option>
                </select>
            </div>

            <div class="col-lg-2 col-md-3 mb-2">
                <select id="sortFilter" class="form-select form-select-sm">
                    <option value="name_asc">Name (A-Z)</option>
                    <option value="name_desc">Name (Z-A)</option>
                    <option value="created_desc">Newest</option>
                    <option value="created_asc">Oldest</option>
                    <option value="processed_desc">Recent</option>
                    <option value="status_asc">Status</option>
                </select>
            </div>

            <!-- Clear Button -->
            <div class="col-lg-1 col-md-2 mb-2">
                <button type="button" id="clearFilters" class="btn btn-outline-secondary btn-sm w-100">
                    <i class="fa fa-times"></i>
                </button>
            </div>
        </div>

        <!-- Filter Summary (Hidden by default) -->
        <div class="row" id="filterSummary" style="display: none;">
            <div class="col-12">
                <div class="alert alert-info py-1 px-2 mb-0 mt-2">
                    <small><i class="fa fa-filter me-1"></i><span id="filterSummaryText">No filters applied</span></small>
                </div>
            </div>
        </div>
    </div>
    <div class="panel-body" id="cardViewContainer">
        <!-- PODs Card View -->
        <div id="podsContainer" class="row">
            <!-- Cards will be loaded here via AJAX -->
        </div>
    </div>

    <!-- List View Container (Hidden by default) -->
    <div class="panel-body" id="listViewContainer" style="display: none;">
        <table id="podsTable" class="table table-striped table-bordered align-middle text-nowrap">
            <thead>
                <tr>
                    <th width="25%">POD Details</th>
                    <th width="20%">Organization</th>
                    <th width="15%">Processing</th>
                    <th width="15%">Status</th>
                    <th width="15%">Statistics</th>
                    <th width="10%">Actions</th>
                </tr>
            </thead>
            <tbody>
                <!-- Data will be loaded via AJAX -->
            </tbody>
        </table>
    </div>
</div>
<!-- END panel -->
@section Scripts {
    <script src="https://ops_cdn.stc.com.sa/ca/plugins/bootstrap/js/bootstrap.bundle.min.js"></script>
    <script src="https://ops_cdn.stc.com.sa/ca/plugins/datatables.net/js/dataTables.min.js"></script>
    <script src="https://ops_cdn.stc.com.sa/ca/plugins/datatables.net-bs5/js/dataTables.bootstrap5.min.js"></script>
    <script src="https://ops_cdn.stc.com.sa/ca/plugins/datatables.net-responsive/js/dataTables.responsive.min.js"></script>
    <script src="https://ops_cdn.stc.com.sa/ca/plugins/datatables.net-responsive-bs5/js/responsive.bootstrap5.min.js"></script>

    <script>
        // Global variables
        let currentView = localStorage.getItem('podViewMode') || 'card';
        let podsTable = null;
        let allPODs = [];
        let filteredPODs = [];
        let displayedPODs = []; // Cards currently shown
        let currentPage = 1;
        let itemsPerPage = 10;
        let isLoading = false;
        let hasMoreData = true;
        let lastAppliedFilters = {};

        $(document).ready(function() {
            // Set initial button states immediately based on saved preference
            updateButtonStates(currentView);
            initializePage();
        });

        function updateButtonStates(viewType) {
            console.log('🎯 Updating button states for:', viewType);

            // Reset all button classes first
            $('#cardViewBtn, #listViewBtn').removeClass('btn-muted btn-outline-muted');

            if (viewType === 'list') {
                $('#listViewBtn').addClass('btn-muted');
                $('#cardViewBtn').addClass('btn-outline-muted');
                console.log('📋 List button activated');
            } else {
                $('#cardViewBtn').addClass('btn-muted');
                $('#listViewBtn').addClass('btn-outline-muted');
                console.log('🃏 Card button activated');
            }

            // Log final button states
            console.log('  - cardViewBtn classes:', $('#cardViewBtn')[0].className);
            console.log('  - listViewBtn classes:', $('#listViewBtn')[0].className);
        }

        // FIXED v2: Initialize page without unnecessary loading screens
              // REPLACE ONLY this function in your JavaScript:

        function initializePage() {
            loadFilterOptions();
            bindEvents();
            bindInfiniteScroll();

            // Show the correct container immediately based on current view
            if (currentView === 'card') {
                $('#cardViewContainer').show().css('display', 'block').removeClass('d-none');
                $('#listViewContainer').hide().css('display', 'none').addClass('d-none');
            } else {
                $('#listViewContainer').show().css('display', 'block').removeClass('d-none');
                $('#cardViewContainer').hide().css('display', 'none').addClass('d-none');
            }

            // Load data and display
            loadPODsData().then(() => {
                filteredPODs = [...allPODs];
                setInitialView();
            });
        }

        // FIXED v2: Enhanced infinite scroll with better trigger logic
        function bindInfiniteScroll() {
            $(window).on('scroll', function() {
                // Only work in card view, when not loading, and when there's more data
                if (currentView !== 'card' || isLoading || !hasMoreData || filteredPODs.length === 0) return;

                const scrollTop = $(window).scrollTop();
                const windowHeight = $(window).height();
                const documentHeight = $(document).height();
                const scrollPercentage = (scrollTop + windowHeight) / documentHeight;

                // Only trigger if we have cards displayed and user scrolled to 85%
                if (displayedPODs.length > 0 && scrollPercentage > 0.85) {
                    loadMoreCards();
                }
            });
        }

             // REPLACE ONLY this function in your JavaScript:

        function setInitialView() {
            if (currentView === 'list') {
                // Show list container and load DataTable
                $('#cardViewContainer').hide().css('display', 'none').addClass('d-none');
                $('#listViewContainer').show().css('display', 'block').removeClass('d-none');

                // Force DOM update
                $('#listViewContainer')[0].offsetHeight;

                // Initialize DataTable
                setTimeout(() => initializeDataTable(), 50);
            } else {
                // Show card container and load cards
                $('#listViewContainer').hide().css('display', 'none').addClass('d-none');
                $('#cardViewContainer').show().css('display', 'block').removeClass('d-none');

                // Load initial cards
                loadInitialCards();
            }
        }

        function loadFilterOptions() {
            $.get('/Lookups/GetCategoriesData')
                .done(function(response) {
                    if (response && response.data) {
                        const categorySelect = $('#categoryFilter');
                        response.data.forEach(function(category) {
                            categorySelect.append(`<option value="${category.id}">${category.name}</option>`);
                        });
                    }
                });

            $.get('/Lookups/GetVendorsData')
                .done(function(response) {
                    if (response && response.data) {
                        const vendorSelect = $('#vendorFilter');
                        response.data.forEach(function(vendor) {
                            vendorSelect.append(`<option value="${vendor.id}">${vendor.name}</option>`);
                        });
                    }
                });

            $.get('/Lookups/GetDepartmentsData')
                .done(function(response) {
                    if (response && response.data) {
                        const departmentSelect = $('#departmentFilter');
                        response.data.forEach(function(department) {
                            departmentSelect.append(`<option value="${department.id}">${department.name}</option>`);
                        });
                    }
                });
        }

        function bindEvents() {
            $('#cardViewBtn').click(() => switchView('card'));
            $('#listViewBtn').click(() => switchView('list'));
            $('#clearFilters').click(clearFilters);

            let searchTimeout;
            $('#searchFilter').on('input', function() {
                clearTimeout(searchTimeout);
                searchTimeout = setTimeout(applyFilters, 500);
            });

            $('#categoryFilter, #vendorFilter, #departmentFilter, #sortFilter').change(applyFilters);
        }

        // ENHANCED v2: View switching with proper refresh functionality
        function switchView(viewType) {
            if (viewType === currentView) return;

            console.log(`🔄 Switching from ${currentView} to ${viewType}`);

            currentView = viewType;
            localStorage.setItem('podViewMode', viewType);

            // Update button states immediately
            updateButtonStates(viewType);

            if (viewType === 'card') {
                console.log('🃏 Activating card view');
                // Force hide list view with multiple methods
                $('#listViewContainer').hide().css('display', 'none').addClass('d-none');
                // Force show card view with multiple methods
                $('#cardViewContainer').show().css('display', 'block').removeClass('d-none');

                // Refresh card view with current filters
                refreshCardView();
            } else {
                console.log('📋 Activating list view');
                // Force hide card view with multiple methods
                $('#cardViewContainer').hide().css('display', 'none').addClass('d-none');
                // Force show list view with multiple methods
                $('#listViewContainer').show().css('display', 'block').removeClass('d-none');

                // Force DOM update before initializing DataTable
                $('#listViewContainer')[0].offsetHeight;

                // Initialize or reload DataTable
                setTimeout(() => refreshListView(), 50);
            }

            console.log(`✅ View switched to ${viewType}`);
            console.log(`   - Card container visible: ${$('#cardViewContainer').is(':visible')}`);
            console.log(`   - List container visible: ${$('#listViewContainer').is(':visible')}`);
        }

        // FIXED v2: Load PODs data without showing loading screen
        function loadPODsData() {
            return $.ajax({
                url: '@Url.Action("GetPodsData")',
                type: 'GET',
                dataType: 'json',
                success: function(response) {
                    if (response && response.data) {
                        allPODs = response.data;
                        console.log(`📊 Loaded ${allPODs.length} PODs from server`);
                    } else {
                        allPODs = [];
                        console.warn('No POD data received from server');
                    }
                },
                error: function(xhr, status, error) {
                    console.error('Error loading PODs:', error);
                    allPODs = [];
                    showErrorState();
                }
            });
        }

        // FIXED v2: Refresh card view without unnecessary loading states
        function refreshCardView() {
            console.log('🔄 Refreshing card view with current filters');

            // Reset pagination state
            currentPage = 1;
            displayedPODs = [];
            hasMoreData = true;
            $('#podsContainer').empty();

            // Apply current filters and load cards immediately
            applyCurrentFilters();
            loadInitialCards();
        }

        // NEW v2: Refresh list view with current filters
        function refreshListView() {
            console.log('🔄 Refreshing list view with current filters');

            if (podsTable) {
                podsTable.ajax.reload();
            } else {
                initializeDataTable();
            }
        }

        // ENHANCED v2: Apply filters with proper state management
        function applyFilters() {
            lastAppliedFilters = {
                search: $('#searchFilter').val().toLowerCase().trim(),
                category: $('#categoryFilter').val(),
                vendor: $('#vendorFilter').val(),
                department: $('#departmentFilter').val(),
                sort: $('#sortFilter').val()
            };

            applyCurrentFilters();
            updateFilterSummary(lastAppliedFilters);

            if (currentView === 'card') {
                resetCardView();
                loadInitialCards();
            } else {
                displayResults();
            }
        }

        // NEW v2: Apply current filter state to data
        function applyCurrentFilters() {
            filteredPODs = allPODs.filter(function(pod) {
                if (lastAppliedFilters.search) {
                    const searchableText = `${pod.name} ${pod.podCode} ${pod.description || ''}`.toLowerCase();
                    if (!searchableText.includes(lastAppliedFilters.search)) {
                        return false;
                    }
                }

                if (lastAppliedFilters.category && pod.categoryId != lastAppliedFilters.category) {
                    return false;
                }

                if (lastAppliedFilters.vendor && pod.vendorId != lastAppliedFilters.vendor) {
                    return false;
                }

                if (lastAppliedFilters.department && pod.departmentId != lastAppliedFilters.department) {
                    return false;
                }

                return true;
            });

            sortPODs(filteredPODs, lastAppliedFilters.sort);
            $('#totalCount').text(filteredPODs.length);
        }

        function sortPODs(pods, sortBy) {
            pods.sort(function(a, b) {
                switch (sortBy) {
                    case 'name_asc':
                        return a.name.localeCompare(b.name);
                    case 'name_desc':
                        return b.name.localeCompare(a.name);
                    case 'created_desc':
                        return new Date(b.createdDate) - new Date(a.createdDate);
                    case 'created_asc':
                        return new Date(a.createdDate) - new Date(b.createdDate);
                    case 'processed_desc':
                        const dateA = a.lastProcessedDate ? new Date(a.lastProcessedDate) : new Date(0);
                        const dateB = b.lastProcessedDate ? new Date(b.lastProcessedDate) : new Date(0);
                        return dateB - dateA;
                    case 'status_asc':
                        return a.status.localeCompare(b.status);
                    default:
                        return 0;
                }
            });
        }

        function updateFilterSummary(filters) {
            let summary = [];

            if (filters.search) summary.push(`Search: "${filters.search}"`);
            if (filters.category) summary.push(`Category: ${$('#categoryFilter option:selected').text()}`);
            if (filters.vendor) summary.push(`Vendor: ${$('#vendorFilter option:selected').text()}`);
            if (filters.department) summary.push(`Department: ${$('#departmentFilter option:selected').text()}`);

            if (summary.length > 0) {
                $('#filterSummaryText').text(summary.join(', '));
                $('#filterSummary').show();
            } else {
                $('#filterSummary').hide();
            }
        }

        // NEW v2: Reset card view pagination
        function resetCardView() {
            currentPage = 1;
            displayedPODs = [];
            hasMoreData = true;
            $('#podsContainer').empty();
            hideLoadingSpinner();
        }

        // FIXED v2: Load initial cards without loading screen
        function loadInitialCards() {
            console.log('📄 Loading initial cards');

            if (filteredPODs.length === 0) {
                showNoResults();
                return;
            }

            // Load first batch immediately without loading screen
            loadMoreCards();
        }

        // FIXED v2: Load more cards with proper loading states
        function loadMoreCards() {
            if (isLoading || !hasMoreData) return;

            console.log(`📄 Loading page ${currentPage} of cards (${displayedPODs.length} already shown)`);
            isLoading = true;

            // Only show bottom spinner if we already have cards displayed
            if (displayedPODs.length > 0) {
                showLoadingSpinner();
            }

            // Shorter delay for better UX
            setTimeout(() => {
                const startIndex = (currentPage - 1) * itemsPerPage;
                const endIndex = startIndex + itemsPerPage;
                const pageData = filteredPODs.slice(startIndex, endIndex);

                if (pageData.length === 0) {
                    hasMoreData = false;
                    hideLoadingSpinner();
                    isLoading = false;
                    console.log('📄 No more cards to load');
                    return;
                }

                displayedPODs = displayedPODs.concat(pageData);
                appendCardsToContainer(pageData);

                currentPage++;
                hasMoreData = endIndex < filteredPODs.length;

                hideLoadingSpinner();
                isLoading = false;

                console.log(`✅ Loaded ${pageData.length} cards. Total displayed: ${displayedPODs.length}/${filteredPODs.length}`);

            }, 200); // Reduced delay
        }

        // ENHANCED v2: Append cards to container with animation
        function appendCardsToContainer(pods) {
            let cardsHtml = '';

            pods.forEach(function(pod) {
                cardsHtml += `
                    <div class="col-lg-4 col-md-6 col-sm-12 pod-card-item" data-pod-id="${pod.id}" style="opacity: 0; transform: translateY(20px);">
                        <div class="pod-card">
                            <div class="pod-header">
                                <div class="pod-title-section">
                                    <div class="pod-title">${pod.name}</div>
                                    <div class="pod-code">${pod.podCode || 'N/A'}</div>
                                </div>

                                <div class="actions-dropdown">
                                    <div class="dropdown">
                                        <button class="cog-btn" type="button" data-bs-toggle="dropdown">
                                            <i class="fa fa-cog"></i>
                                        </button>
                                        <ul class="dropdown-menu dropdown-menu-end">
                                            <li><a class="dropdown-item" href="@Url.Action("Details")/${pod.id}">
                                                <i class="fa fa-eye text-info"></i> View Details
                                            </a></li>
                                            <li><a class="dropdown-item" href="@Url.Action("Edit")/${pod.id}">
                                                <i class="fa fa-edit text-primary"></i> Edit POD
                                            </a></li>
                                            <li><a class="dropdown-item" href="/Template/Wizard?podId=${pod.id}">
                                                <i class="fa fa-plus text-success"></i> Add Template
                                            </a></li>
                                            <li><hr class="dropdown-divider"></li>
                                            <li><a class="dropdown-item text-warning" href="javascript:void(0)" onclick="duplicatePOD(${pod.id})">
                                                <i class="fa fa-copy text-warning"></i> Duplicate
                                            </a></li>
                                            <li><a class="dropdown-item text-danger" href="javascript:void(0)" onclick="deletePOD(${pod.id}, '${pod.name.replace(/'/g, "\\'")}')">
                                                <i class="fa fa-trash text-danger"></i> Delete
                                            </a></li>
                                        </ul>
                                    </div>
                                </div>
                            </div>

                            ${pod.description ? `<div class="pod-description">${pod.description}</div>` : ''}

                            <div class="pod-meta">
                                <div class="meta-item">
                                    <div class="meta-label">Category</div>
                                    <div class="meta-value">${pod.category || 'N/A'}</div>
                                </div>
                                <div class="meta-item">
                                    <div class="meta-label">Department</div>
                                    <div class="meta-value">${pod.department || 'N/A'}</div>
                                </div>
                                <div class="meta-item">
                                    <div class="meta-label">Vendor</div>
                                    <div class="meta-value">${pod.vendor || 'N/A'}</div>
                                </div>
                                <div class="meta-item">
                                    <div class="meta-label">Frequency</div>
                                    <div class="meta-value">${pod.frequency || 'N/A'}</div>
                                </div>
                            </div>

                            <div class="pod-badges">
                                ${getStatusBadge(pod.status)}
                                ${getAutomationBadge(pod.automationStatus)}
                                ${pod.isFinancialData ? '<span class="badge bg-danger">Financial</span>' : ''}
                                ${pod.requiresApproval ? '<span class="badge bg-info">Approval Required</span>' : ''}
                            </div>

                            <div class="pod-footer">
                                <div class="footer-item">
                                    <i class="fa fa-calendar-alt text-primary"></i>
                                    <span><strong>Last Period:</strong> ${getLastProcessedPeriod(pod.lastProcessedDate)}</span>
                                </div>
                                <div class="footer-item">
                                    <i class="fa fa-clock text-success"></i>
                                    <span><strong>Processed:</strong> ${formatDate(pod.lastProcessedDate)}</span>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
            });

            const $newCards = $(cardsHtml);
            $('#podsContainer').append($newCards);

            // Animate cards in
            setTimeout(() => {
                $newCards.css({
                    'opacity': '1',
                    'transform': 'translateY(0)',
                    'transition': 'all 0.3s ease'
                });
            }, 50);
        }

        // FIXED v2: Show loading spinner only at bottom when loading more
        function showLoadingSpinner() {
            // Only show if we have existing cards (not initial load)
            if (displayedPODs.length > 0 && $('#loadingSpinner').length === 0) {
                const spinnerHtml = `
                    <div id="loadingSpinner" class="col-12 text-center py-3">
                        <div class="spinner-border spinner-border-sm text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <div class="mt-2 text-muted small">Loading more PODs...</div>
                    </div>
                `;
                $('#podsContainer').append(spinnerHtml);
            }
        }

        // FIXED v2: Hide loading spinner
        function hideLoadingSpinner() {
            $('#loadingSpinner').remove();
        }

        // NEW v2: Show error state
        function showErrorState() {
            const errorHtml = `
                <div class="col-12 text-center py-5">
                    <i class="fa fa-exclamation-triangle text-danger fa-3x mb-3"></i>
                    <h4 class="text-danger">Error Loading PODs</h4>
                    <p class="text-muted">Please refresh the page and try again.</p>
                    <button class="btn btn-primary" onclick="location.reload()">
                        <i class="fa fa-refresh"></i> Refresh Page
                    </button>
                </div>
            `;
            $('#podsContainer').html(errorHtml);
        }

        function displayResults() {
            $('#totalCount').text(filteredPODs.length);

            if (filteredPODs.length === 0) {
                showNoResults();
                return;
            }

            if (currentView === 'card') {
                // Card view handled by infinite scroll now
                resetCardView();
                loadInitialCards();
            } else {
                displayListView(filteredPODs);
            }
        }

        function displayListView(pods) {
            if (podsTable) {
                podsTable.ajax.reload();
            } else {
                initializeDataTable();
            }
        }

        function initializeDataTable() {
            console.log('🔧 initializeDataTable called');

            // Force container to be visible with multiple methods
            console.log('🔨 FORCING container visibility with multiple methods...');
            $('#listViewContainer').show();
            $('#listViewContainer').css('display', 'block');
            $('#listViewContainer').removeClass('d-none').addClass('d-block');

            // Force immediate DOM update
            $('#listViewContainer')[0].offsetHeight;

            // Wait for next frame
            requestAnimationFrame(function() {
                console.log('🎬 After requestAnimationFrame:');
                console.log('📋 Table container visible:', $('#listViewContainer').is(':visible'));
                console.log('📋 Table element visible:', $('#podsTable').is(':visible'));
                console.log('📋 Container display CSS:', $('#listViewContainer').css('display'));
                console.log('📋 Container classes:', $('#listViewContainer')[0].className);
                console.log('📋 Existing DataTable instance:', podsTable !== null);

                if (podsTable) {
                    console.log('🗑️ Destroying existing DataTable...');
                    podsTable.destroy();
                    podsTable = null;
                }

                console.log('🔧 Creating new DataTable...');

                try {
                    podsTable = $('#podsTable').DataTable({
                        responsive: {
                            details: {
                                type: 'column',
                                target: 'tr'
                            }
                        },
                        processing: true,
                        ajax: {
                            url: '@Url.Action("GetPodsData")',
                            type: 'GET',
                            dataSrc: 'data'
                        },
                        columns: [
                            {
                                data: 'name',
                                render: function(data, type, row) {
                                    return `
                                        <div>
                                            <div class="fw-bold text-primary">${data}</div>
                                            <div class="small text-muted">${row.podCode}</div>
                                            ${row.description ? `<div class="small text-muted">${row.description.substring(0, 80)}${row.description.length > 80 ? '...' : ''}</div>` : ''}
                                        </div>
                                    `;
                                }
                            },
                            {
                                data: 'category',
                                render: function(data, type, row) {
                                    return `
                                        <div class="small">
                                            <div><strong>Cat:</strong> ${data || 'N/A'}</div>
                                            <div><strong>Dept:</strong> ${row.department || 'N/A'}</div>
                                            <div><strong>Vendor:</strong> ${row.vendor || 'N/A'}</div>
                                        </div>
                                    `;
                                }
                            },
                            {
                                data: 'automationStatus',
                                render: function(data, type, row) {
                                    return `
                                        <div class="text-center">
                                            <div class="mb-1">${getAutomationBadge(data, 'sm')}</div>
                                            <div class="small text-muted">${row.frequency}</div>
                                            <div class="small text-muted">Priority: ${row.processingPriority}/10</div>
                                        </div>
                                    `;
                                }
                            },
                            {
                                data: 'status',
                                render: function(data, type, row) {
                                    let badges = getStatusBadge(data, 'sm');
                                    if (row.isFinancialData) badges += '<br><span class="badge bg-danger badge-sm mt-1">Financial</span>';
                                    if (row.requiresApproval) badges += '<br><span class="badge bg-info badge-sm mt-1">Approval</span>';
                                    return `<div class="text-center">${badges}</div>`;
                                }
                            },
                            {
                                data: 'processedCount',
                                render: function(data, type, row) {
                                    return `
                                        <div class="text-center small">
                                            <div class="fw-bold text-primary">${data || 0}</div>
                                            <div class="text-muted">Processed</div>
                                            <div class="text-muted">${formatDate(row.lastProcessedDate)}</div>
                                        </div>
                                    `;
                                }
                            },
                            {
                                data: 'id',
                                orderable: false,
                                searchable: false,
                                render: function(data, type, row) {
                                    return `
                                        <div class="btn-group">
                                            <a href="@Url.Action("Details")/${data}" class="btn btn-outline-primary btn-xs" title="View Details">
                                                <i class="fa fa-eye"></i>
                                            </a>
                                            <a href="@Url.Action("Edit")/${data}" class="btn btn-outline-info btn-xs" title="Edit">
                                                <i class="fa fa-edit"></i>
                                            </a>
                                            <button onclick="deletePOD(${data}, '${row.name.replace(/'/g, "\\'")}') " class="btn btn-outline-danger btn-xs" title="Delete">
                                                <i class="fa fa-trash"></i>
                                            </button>
                                        </div>
                                    `;
                                }
                            }
                        ],
                        pageLength: 25,
                        lengthMenu: [[10, 25, 50, 100], [10, 25, 50, 100]],
                        order: [[0, 'asc']],
                        columnDefs: [
                            { targets: -1, orderable: false, searchable: false }
                        ],
                        searching: false,
                        language: {
                            emptyTable: "No PODs match your current filters",
                            zeroRecords: "No PODs match your current filters",
                            lengthMenu: "Show _MENU_ PODs per page",
                            info: "Showing _START_ to _END_ of _TOTAL_ PODs",
                            infoEmpty: "No PODs found"
                        },
                        initComplete: function() {
                            console.log('✅ DataTable initialization completed successfully');
                            // Force redraw after init
                            console.log('🔄 Forcing column adjustment...');
                            this.api().columns.adjust();
                        },
                        drawCallback: function() {
                            console.log('🎨 DataTable draw callback executed');
                        }
                    });

                    console.log('✅ DataTable created successfully:', podsTable !== null);

                    // Force redraw one more time
                    setTimeout(function() {
                        if (podsTable) {
                            console.log('🔄 Final redraw and adjustment...');
                            podsTable.columns.adjust().responsive.recalc().draw();
                        }
                    }, 100);

                } catch (error) {
                    console.error('❌ Error creating DataTable:', error);
                }
            });
        }

        // ENHANCED v2: Clear filters with proper refresh
        function clearFilters() {
            $('#searchFilter').val('');
            $('#categoryFilter').val('');
            $('#vendorFilter').val('');
            $('#departmentFilter').val('');
            $('#sortFilter').val('name_asc');

            lastAppliedFilters = {};
            updateFilterSummary({});

            if (currentView === 'card') {
                refreshCardView();
            } else {
                refreshListView();
            }
        }

        function showNoResults() {
            const noResultsHtml = `
                <div class="col-12">
                    <div class="text-center py-5">
                        <i class="fa fa-search text-muted fa-3x mb-3"></i>
                        <h4 class="text-muted">No PODs Found</h4>
                        <p class="text-muted">Try adjusting your filters or search terms.</p>
                        <button type="button" class="btn btn-primary" onclick="clearFilters()">
                            <i class="fa fa-times"></i> Clear All Filters
                        </button>
                    </div>
                </div>
            `;

            if (currentView === 'card') {
                $('#podsContainer').html(noResultsHtml);
            } else if (podsTable) {
                podsTable.clear().draw();
            }
        }

        function getStatusBadge(status, size = '') {
            const statusMap = {
                'Draft': 'bg-secondary',
                'Active': 'bg-success',
                'Inactive': 'bg-warning',
                'Archived': 'bg-dark'
            };
            const sizeClass = size ? `badge-${size}` : '';
            return `<span class="badge ${statusMap[status] || 'bg-secondary'} ${sizeClass}">${status}</span>`;
        }

        function getAutomationBadge(automationStatus, size = '') {
            const automationMap = {
                'PDF': 'bg-info',
                'SemiAutomated': 'bg-warning',
                'FullyAutomated': 'bg-success'
            };
            const sizeClass = size ? `badge-${size}` : '';
            return `<span class="badge ${automationMap[automationStatus] || 'bg-secondary'} ${sizeClass}">${automationStatus}</span>`;
        }

        function formatDate(dateString) {
            if (!dateString || dateString === 'Never') return 'Never';
            try {
                const date = new Date(dateString);
                return date.toLocaleDateString('en-GB', {
                    day: '2-digit',
                    month: 'short',
                    year: 'numeric'
                });
            } catch {
                return dateString;
            }
        }

        function getLastProcessedPeriod(dateString) {
            if (!dateString || dateString === 'Never') return 'No Period';
            try {
                const date = new Date(dateString);
                return date.toLocaleDateString('en-GB', {
                    month: 'long',
                    year: 'numeric'
                });
            } catch {
                return 'No Period';
            }
        }

        function duplicatePOD(podId) {
            alert('Duplicate functionality to be implemented');
        }

        // ENHANCED v2: Delete with smooth UI updates
        function deletePOD(podId, podName) {
            if (confirm(`Are you sure you want to delete the POD "${podName}"?\n\nThis action cannot be undone.`)) {
                $.post('@Url.Action("Delete")', {
                    id: podId,
                    __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                })
                .done(function(response) {
                    if (response.success) {
                        alert('POD deleted successfully.');
                        // Remove from arrays
                        allPODs = allPODs.filter(p => p.id !== podId);
                        filteredPODs = filteredPODs.filter(p => p.id !== podId);
                        displayedPODs = displayedPODs.filter(p => p.id !== podId);

                        // Remove from UI with smooth animation
                        $(`.pod-card-item[data-pod-id="${podId}"]`).fadeOut(300, function() {
                            $(this).remove();
                            $('#totalCount').text(filteredPODs.length);

                            // If no cards left in current view, show no results
                            if (currentView === 'card' && $('#podsContainer .pod-card-item').length === 0) {
                                if (filteredPODs.length === 0) {
                                    showNoResults();
                                }
                            }
                        });
                    } else {
                        alert(response.message || 'Failed to delete POD.');
                    }
                })
                .fail(function() {
                    alert('An error occurred while deleting the POD.');
                });
            }
        }
    </script>

    @Html.AntiForgeryToken()
}