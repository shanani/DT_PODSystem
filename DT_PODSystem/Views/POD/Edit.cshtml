@{
    ViewData["Title"] = "POD Edit";
}

@section Styles {
    <link href="https://ops_cdn.stc.com.sa/ca/plugins/bootstrap/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://ops_cdn.stc.com.sa/ca/plugins/fontawesome/css/all.min.css" rel="stylesheet">
    <link href="https://ops_cdn.stc.com.sa/ca/plugins/blueimp-file-upload/css/jquery.fileupload.css" rel="stylesheet">
    <link href="https://ops_cdn.stc.com.sa/ca/plugins/blueimp-file-upload/css/jquery.fileupload-ui.css" rel="stylesheet">
    <style>
        .form-section {
            margin-bottom: 2rem;
        }

            .form-section h5 {
                color: #495057;
                font-weight: 600;
                margin-bottom: 1rem;
                border-bottom: 1px solid #e9ecef;
                padding-bottom: 0.5rem;
            }

        .pod-section {
            background: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 0.375rem;
            padding: 1rem;
            margin-bottom: 1rem;
        }

            .pod-section h6 {
                color: #495057;
                font-weight: 600;
                margin-bottom: 0.75rem;
            }

        .single-entry {
            background: white;
            border: 1px solid #e9ecef;
            border-radius: 0.25rem;
            padding: 0.75rem;
            margin-bottom: 0.5rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .table-entry {
            background: white;
            border: 1px solid #e9ecef;
            border-radius: 0.25rem;
            padding: 1rem;
            margin-bottom: 1rem;
        }

        .entry-table {
            font-size: 0.875rem;
        }

            .entry-table th, .entry-table td {
                padding: 0.375rem;
                vertical-align: middle;
            }

                .entry-table td:first-child input,
                .entry-table th input {
                    font-weight: 500;
                    color: var(--bs-primary) !important;
                }

            .entry-table input {
                border: 1px solid #ced4da;
                border-radius: 0.25rem;
                padding: 0.25rem 0.5rem;
                width: 100%;
                font-size: 0.875rem;
            }

            .entry-table th {
                background-color: #e5e5e5;
                color: var(--bs-primary);
                font-weight: 500;
            }

        .table-top-left {
            background-color: #e5e5e5 !important;
            border: none;
            color: white;
        }

        .file-upload-area {
            border: 2px dashed #dee2e6;
            border-radius: 0.5rem;
            padding: 2rem;
            text-align: center;
            transition: border-color 0.3s ease;
            background: #f8f9fa;
        }

            .file-upload-area:hover,
            .file-upload-area.dragover {
                border-color: #0d6efd;
                background-color: #f0f7ff;
            }

        .uploaded-file {
            background: white;
            border: 1px solid #e9ecef;
            border-radius: 0.25rem;
            padding: 0.75rem;
            margin-bottom: 0.5rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            transition: box-shadow 0.15s ease-in-out;
        }

            .uploaded-file:hover {
                box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
            }

        .file-icon {
            width: 32px;
            height: 32px;
            background: #e9ecef;
            border-radius: 0.25rem;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 0.75rem;
        }

        .required-field::after {
            content: " *";
            color: #dc3545;
        }
    </style>
}

<!-- BEGIN breadcrumb -->
<ol class="breadcrumb">
    <li class="breadcrumb-item"><a href="javascript:;">Home</a></li>
    <li class="breadcrumb-item"><a href="javascript:;">POD Management</a></li>
    <li class="breadcrumb-item active">Edit POD</li>
</ol>
<!-- END breadcrumb -->
<!-- BEGIN page-header -->
<h1 class="page-header">Edit POD <small>Proof of Delivery Configuration</small></h1>
<!-- END page-header -->
<!-- BEGIN POD Details Panel -->
<div class="panel panel-inverse" data-sortable-id="pod-details">
    <!-- BEGIN panel-heading -->
    <div class="panel-heading ui-sortable-handle">
        <h4 class="panel-title">
            <i class="fa fa-info-circle me-2"></i>POD Details
        </h4>
        <div class="panel-heading-btn">
            <a href="javascript:;" class="btn btn-xs btn-icon btn-default" data-toggle="panel-expand"><i class="fa fa-expand"></i></a>
            <a href="javascript:;" class="btn btn-xs btn-icon btn-success" data-toggle="panel-reload"><i class="fa fa-redo"></i></a>
            <a href="javascript:;" class="btn btn-xs btn-icon btn-warning" data-toggle="panel-collapse"><i class="fa fa-minus"></i></a>
            <a href="javascript:;" class="btn btn-xs btn-icon btn-danger" data-toggle="panel-remove"><i class="fa fa-times"></i></a>
        </div>
    </div>
    <!-- END panel-heading -->
    <!-- BEGIN panel-body -->
    <div class="panel-body">
        <form id="pod-edit-form">
            <!-- Basic Information Section -->
            <div class="form-section">
                <h5><i class="fa fa-file-alt me-2"></i>Basic Information</h5>

                <div class="row">
                    <div class="col-lg-8 col-md-12">
                        <div class="mb-3">
                            <label class="form-label required-field">POD Name</label>
                            <input type="text" name="podName" class="form-control" value="Monthly Financial Reports Processing"
                                   placeholder="Enter a descriptive name for this POD" />
                            <small class="form-text text-muted">This will be used to identify the POD across the system</small>
                        </div>
                    </div>
                    <div class="col-lg-4 col-md-12">
                        <div class="mb-3">
                            <label class="form-label">POD Code</label>
                            <input type="text" name="podCode" class="form-control bg-light" value="POD-2025-001" readonly />
                            <small class="form-text text-muted">Unique identifier generated automatically</small>
                        </div>
                    </div>
                </div>
                <div class="mb-3">
                    <label class="form-label">Description</label>
                    <textarea name="description" class="form-control" rows="3"
                              placeholder="Provide a detailed description of this POD and its purpose">Automated processing of monthly financial reports including budget analysis, expense tracking, and revenue reporting. This POD handles critical financial data that requires approval workflow.</textarea>
                    <small class="form-text text-muted">Optional but recommended for better understanding</small>
                </div>
            </div>

            <!-- Business References Section -->
            <div class="form-section">
                <h5><i class="fa fa-file-contract me-2"></i>Business References</h5>

                <div class="row">
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label class="form-label">Purchase Order Number</label>
                            <input type="text" name="poNumber" class="form-control" value="PO-2024-001234"
                                   placeholder="e.g., PO-2024-001234" />
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label class="form-label">Contract Number</label>
                            <input type="text" name="contractNumber" class="form-control" value="CTR-2024-STC-001"
                                   placeholder="e.g., CTR-2024-STC-001" />
                        </div>
                    </div>
                </div>
            </div>

            <!-- Organizational Relationships Section -->
            <div class="form-section">
                <h5><i class="fa fa-sitemap me-2"></i>Organizational Relationships</h5>

                <div class="row">
                    <div class="col-md-4">
                        <div class="mb-3">
                            <label class="form-label required-field">Category</label>
                            <select name="categoryId" class="form-control">
                                <option value="">Select Category</option>
                                <option value="1">MSP Certificates</option>
                                <option value="2" selected>Financial Documents</option>
                                <option value="3">HR Documents</option>
                                <option value="4">Legal Documents</option>
                                <option value="5">Procurement Documents</option>
                            </select>
                            <small class="form-text text-muted">Business domain categorization</small>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="mb-3">
                            <label class="form-label required-field">Department</label>
                            <select name="departmentId" class="form-control">
                                <option value="">Select Department</option>
                                <option value="1" selected>Financial Planning (Finance and Administration)</option>
                                <option value="2">Accounts Payable (Finance and Administration)</option>
                                <option value="3">Treasury (Finance and Administration)</option>
                                <option value="4">Talent Acquisition (Human Resources)</option>
                                <option value="5">Employee Development (Human Resources)</option>
                                <option value="6">Software Development (Information Technology)</option>
                                <option value="7">Infrastructure and Networks (Information Technology)</option>
                                <option value="8">Data Analytics (Information Technology)</option>
                                <option value="9">Contract Management (Legal and Compliance)</option>
                                <option value="10">Regulatory Compliance (Legal and Compliance)</option>
                                <option value="11">Facility Management (Operations and Maintenance)</option>
                                <option value="12">Security Operations (Operations and Maintenance)</option>
                            </select>
                            <small class="form-text text-muted">Owning department</small>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="mb-3">
                            <label class="form-label">Vendor</label>
                            <select name="vendorId" class="form-control">
                                <option value="">Select Vendor (Optional)</option>
                                <option value="1">Advanced Analytics Corp</option>
                                <option value="2" selected>Arabian Business Services</option>
                                <option value="3">Digital Transformation Partners</option>
                                <option value="4">Gulf Consulting Group</option>
                                <option value="5">Saudi Technology Solutions</option>
                            </select>
                            <small class="form-text text-muted">Optional: Associated vendor/supplier</small>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Processing Configuration Section -->
            <div class="form-section">
                <h5><i class="fa fa-cogs me-2"></i>Processing Configuration</h5>

                <div class="row">
                    <div class="col-md-4">
                        <div class="mb-3">
                            <label class="form-label required-field">Automation Status</label>
                            <select name="automationStatus" class="form-control">
                                <option value="">Select Automation Level</option>
                                <option value="PDF">PDF Only</option>
                                <option value="SEMI" selected>Semi-Automated</option>
                                <option value="FULL">Fully Automated</option>
                            </select>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="mb-3">
                            <label class="form-label required-field">Processing Frequency</label>
                            <select name="processingFrequency" class="form-control">
                                <option value="">Select Frequency</option>
                                <option value="MONTHLY" selected>Monthly</option>
                                <option value="QUARTERLY">Quarterly</option>
                                <option value="YEARLY">Yearly</option>
                            </select>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="mb-3">
                            <label class="form-label required-field">Processing Priority</label>
                            <select name="processingPriority" class="form-control">
                                <option value="1">1 - Highest Priority</option>
                                <option value="2" selected>2 - High Priority</option>
                                <option value="3">3 - Above Normal</option>
                                <option value="4">4 - Above Normal</option>
                                <option value="5">5 - Normal</option>
                                <option value="6">6 - Below Normal</option>
                                <option value="7">7 - Below Normal</option>
                                <option value="8">8 - Low Priority</option>
                                <option value="9">9 - Low Priority</option>
                                <option value="10">10 - Lowest Priority</option>
                            </select>
                            <small class="form-text text-muted">1 = Highest, 10 = Lowest</small>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Single Points of Contact Section -->
            <div class="form-section">
                <h5><i class="fa fa-users me-2"></i>Single Points of Contact (SPOC)</h5>

                <div class="row">
                    <div class="col-md-4">
                        <div class="mb-3">
                            <label class="form-label">Vendor SPOC</label>
                            <input type="text" name="vendorSPOC" class="form-control" value="vendor.contact@arabianbiz.com"
                                   placeholder="Vendor contact username" />
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="mb-3">
                            <label class="form-label">Governor SPOC</label>
                            <input type="text" name="governorSPOC" class="form-control" value="ahmed.alrashid@stc.com.sa"
                                   placeholder="Governor contact username" />
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="mb-3">
                            <label class="form-label">Finance SPOC</label>
                            <input type="text" name="financeSPOC" class="form-control" value="finance.manager@stc.com.sa"
                                   placeholder="Finance contact username" />
                        </div>
                    </div>
                </div>
            </div>

            <!-- Business Rules & Compliance Section -->
            <div class="form-section">
                <h5><i class="fa fa-shield-alt me-2"></i>Business Rules & Compliance</h5>

                <div class="row">
                    <div class="col-md-6">
                        <div class="form-check form-switch mb-3">
                            <input name="requiresApproval" class="form-check-input" type="checkbox" value="true" checked />
                            <label class="form-check-label">Requires Approval</label>
                            <small class="form-text text-muted d-block">Check if processing requires approval workflow</small>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-check form-switch mb-3">
                            <input name="containsFinancialData" class="form-check-input" type="checkbox" value="true" checked />
                            <label class="form-check-label">Contains Financial Data</label>
                            <small class="form-text text-muted d-block">Check if this POD contains sensitive financial information</small>
                        </div>
                    </div>
                </div>
            </div>
        </form>
    </div>
    <!-- END panel-body -->
</div>
<!-- END POD Details Panel -->
<!-- BEGIN Upload Attachments Panel -->
<div class="panel panel-inverse" data-sortable-id="pod-attachments">
    <!-- BEGIN panel-heading -->
    <div class="panel-heading ui-sortable-handle">
        <h4 class="panel-title">
            <i class="fa fa-paperclip me-2"></i>Upload Attachments
        </h4>
        <div class="panel-heading-btn">
            <a href="javascript:;" class="btn btn-xs btn-icon btn-default" data-toggle="panel-expand"><i class="fa fa-expand"></i></a>
            <a href="javascript:;" class="btn btn-xs btn-icon btn-success" data-toggle="panel-reload"><i class="fa fa-redo"></i></a>
            <a href="javascript:;" class="btn btn-xs btn-icon btn-warning" data-toggle="panel-collapse"><i class="fa fa-minus"></i></a>
            <a href="javascript:;" class="btn btn-xs btn-icon btn-danger" data-toggle="panel-remove"><i class="fa fa-times"></i></a>
        </div>
    </div>
    <!-- END panel-heading -->
    <!-- BEGIN panel-body -->
    <div class="panel-body">
        <!-- File Upload Area -->
        <div class="file-upload-area" id="fileUploadArea"
             ondrop="dropHandler(event)"
             ondragover="dragOverHandler(event)"
             ondragenter="dragEnterHandler(event)"
             ondragleave="dragLeaveHandler(event)">
            <input type="file" id="fileInput" multiple style="display: none;" onchange="handleFileSelect(event)">
            <div class="mb-3">
                <i class="fa fa-cloud-upload-alt fa-3x text-primary mb-3"></i>
                <h5 class="text-dark">Drop files here or click to upload</h5>
                <p class="text-muted mb-3">Support for multiple file uploads. Maximum file size: 10MB</p>
                <button type="button" class="btn btn-primary" onclick="triggerFileUpload()">
                    <i class="fa fa-upload me-1"></i>Select Files
                </button>
            </div>
        </div>

        <!-- Uploaded Files List -->
        <div id="uploadedFilesList" class="mt-4">
            <h6 class="mb-3 text-dark">Uploaded Files</h6>
            <div id="filesContainer">
                <!-- Sample existing files -->
                <div class="uploaded-file">
                    <div class="d-flex align-items-center">
                        <div class="file-icon">
                            <i class="fa fa-file-pdf text-danger"></i>
                        </div>
                        <div>
                            <div class="fw-bold text-dark">pod-specification.pdf</div>
                            <small class="text-muted">2.1 MB • Uploaded 2 hours ago</small>
                        </div>
                    </div>
                    <div class="btn-group">
                        <button type="button" class="btn btn-sm btn-outline-primary" onclick="downloadFile('pod-specification.pdf')" title="Download">
                            <i class="fa fa-download"></i>
                        </button>
                        <button type="button" class="btn btn-sm btn-outline-danger" onclick="removeFile(this)" title="Remove">
                            <i class="fa fa-trash"></i>
                        </button>
                    </div>
                </div>

                <div class="uploaded-file">
                    <div class="d-flex align-items-center">
                        <div class="file-icon">
                            <i class="fa fa-file-excel text-success"></i>
                        </div>
                        <div>
                            <div class="fw-bold text-dark">financial-template.xlsx</div>
                            <small class="text-muted">1.8 MB • Uploaded 1 hour ago</small>
                        </div>
                    </div>
                    <div class="btn-group">
                        <button type="button" class="btn btn-sm btn-outline-primary" onclick="downloadFile('financial-template.xlsx')" title="Download">
                            <i class="fa fa-download"></i>
                        </button>
                        <button type="button" class="btn btn-sm btn-outline-danger" onclick="removeFile(this)" title="Remove">
                            <i class="fa fa-trash"></i>
                        </button>
                    </div>
                </div>
            </div>
            <div id="noFilesMessage" class="text-muted text-center py-3" style="display: none;">
                <i class="fa fa-file fa-2x mb-2"></i>
                <p>No files uploaded yet.</p>
            </div>
        </div>
    </div>
    <!-- END panel-body -->
</div>
<!-- END Upload Attachments Panel -->
<!-- BEGIN POD Attributes Panel -->
<div class="panel panel-inverse" data-sortable-id="pod-attributes">
    <!-- BEGIN panel-heading -->
    <div class="panel-heading ui-sortable-handle">
        <h4 class="panel-title">
            <i class="fa fa-database me-2"></i>POD Attributes
        </h4>
        <div class="panel-heading-btn">
            <a href="javascript:;" class="btn btn-xs btn-icon btn-default" data-toggle="panel-expand"><i class="fa fa-expand"></i></a>
            <a href="javascript:;" class="btn btn-xs btn-icon btn-success" data-toggle="panel-reload"><i class="fa fa-redo"></i></a>
            <a href="javascript:;" class="btn btn-xs btn-icon btn-warning" data-toggle="panel-collapse"><i class="fa fa-minus"></i></a>
            <a href="javascript:;" class="btn btn-xs btn-icon btn-danger" data-toggle="panel-remove"><i class="fa fa-times"></i></a>
        </div>
    </div>
    <!-- END panel-heading -->
    <!-- BEGIN panel-body -->
    <div class="panel-body">
        <div class="mb-3">
            <div class="btn-group">
                <button type="button" class="btn btn-success" onclick="showAddSingleModal()">
                    <i class="fa fa-plus me-1"></i>Add Single Value
                </button>
                <button type="button" class="btn btn-primary" onclick="showAddTableModal()">
                    <i class="fa fa-table me-1"></i>Add Table
                </button>
                <button type="button" class="btn btn-info" onclick="loadSampleData()">
                    <i class="fa fa-upload me-1"></i>Load Sample
                </button>
            </div>
        </div>

        <!-- Single Values Section -->
        <div class="pod-section">
            <h6><i class="fa fa-circle me-2 text-success"></i>Single Values</h6>
            <div id="single-values-container">
                <!-- Single values will be added here -->
            </div>
            <div id="no-single-values" class="text-muted text-center py-3">
                <i class="fa fa-plus-circle fa-2x mb-2"></i>
                <p>No single values defined. Click "Add Single Value" to start.</p>
            </div>
        </div>

        <!-- Tables Section -->
        <div class="pod-section">
            <h6><i class="fa fa-table me-2 text-primary"></i>Tables (Arrays)</h6>
            <div id="tables-container">
                <!-- Tables will be added here -->
            </div>
            <div id="no-tables" class="text-muted text-center py-3">
                <i class="fa fa-table fa-2x mb-2"></i>
                <p>No tables defined. Click "Add Table" to start.</p>
            </div>
        </div>

        <!-- JSON Preview -->
        <div class="pod-section">
            <h6><i class="fa fa-code me-2 text-info"></i>JSON Preview</h6>
            <pre id="json-preview" class="bg-light p-3 rounded border" style="font-size: 0.8rem; max-height: 300px; overflow-y: auto; font-family: 'Courier New', monospace;">{}</pre>
        </div>
    </div>
    <!-- END panel-body -->
</div>
<!-- END POD Attributes Panel -->
<!-- BEGIN Form Actions -->
<div class="row">
    <div class="col-12">
        <div class="d-flex justify-content-between">
            <a href="javascript:;" class="btn btn-secondary" onclick="cancelEdit()">
                <i class="fa fa-times me-1"></i>Cancel
            </a>
            <div>
                <button type="button" class="btn btn-primary" onclick="savePOD()">
                    <i class="fa fa-save me-1"></i>Save Changes
                </button>
            </div>
        </div>
    </div>
</div>
<!-- END Form Actions -->
<!-- Add Single Value Modal -->
<div class="modal fade" id="addSingleModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title"><i class="fa fa-plus-circle me-2"></i>Add Single Value</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label class="form-label">Field Name</label>
                    <input type="text" class="form-control" id="singleFieldName" placeholder="Enter field name">
                </div>
                <div class="mb-3">
                    <label class="form-label">Description</label>
                    <input type="text" class="form-control" id="singleDescription" placeholder="Enter description (optional)">
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-success" onclick="addSingleValue()">
                    <i class="fa fa-plus me-1"></i>Add Single Value
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Add Table Modal -->
<div class="modal fade" id="addTableModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title"><i class="fa fa-table me-2"></i>Add Table (Array)</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label class="form-label">Table Name</label>
                    <input type="text" class="form-control" id="tableName" placeholder="Enter table name">
                </div>
                <div class="mb-3">
                    <label class="form-label">Description</label>
                    <input type="text" class="form-control" id="tableDescription" placeholder="Enter table description (optional)">
                </div>
                <div class="row">
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label class="form-label">Number of Rows</label>
                            <input type="number" class="form-control" id="tableRows" value="3" min="1" max="20">
                            <small class="text-muted">1-20 rows</small>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label class="form-label">Number of Fields</label>
                            <input type="number" class="form-control" id="tableFields" value="3" min="1" max="10">
                            <small class="text-muted">1-10 fields</small>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="addTable()">
                    <i class="fa fa-table me-1"></i>Create Table
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://ops_cdn.stc.com.sa/ca/plugins/jquery/jquery.min.js"></script>
    <script src="https://ops_cdn.stc.com.sa/ca/plugins/bootstrap/js/bootstrap.bundle.min.js"></script>

    <script>
        let podData = {
            singleValues: {},
            tables: {}
        };

        // POD Data Management Class
                // Clean JavaScript - Only your exact format, no backward compatibility

        class PODDataManager {
            static collectFormData() {
                const formData = new FormData(document.getElementById('pod-edit-form'));

                return {
                    // Basic Information
                    name: formData.get('podName'),
                    podCode: formData.get('podCode'),
                    description: formData.get('description'),

                    // Business References
                    poNumber: formData.get('poNumber'),
                    contractNumber: formData.get('contractNumber'),

                    // Organizational
                    categoryId: formData.get('categoryId') ? parseInt(formData.get('categoryId')) : null,
                    departmentId: formData.get('departmentId') ? parseInt(formData.get('departmentId')) : null,
                    vendorId: formData.get('vendorId') ? parseInt(formData.get('vendorId')) : null,

                    // Processing Configuration
                    automationStatus: formData.get('automationStatus'),
                    processingFrequency: formData.get('processingFrequency'),
                    processingPriority: formData.get('processingPriority') ? parseInt(formData.get('processingPriority')) : null,

                    // SPOC
                    vendorSPOC: formData.get('vendorSPOC'),
                    governorSPOC: formData.get('governorSPOC'),
                    financeSPOC: formData.get('financeSPOC'),

                    // Business Rules
                    requiresApproval: formData.has('requiresApproval'),
                    containsFinancialData: formData.has('containsFinancialData'),

                    // POD Entries - Your exact format
                    podEntries: this.generatePODEntriesJSON(),

                    // Attachments
                    attachments: this.getUploadedFilesList()
                };
            }

            // Generate your exact format only
            static generatePODEntriesJSON() {
                const output = [];

                // Add single values with metadata
                Object.keys(podData.singleValues).forEach(key => {
                    const singleData = podData.singleValues[key];
                    output.push({
                        type: "single",
                        name: key,
                        description: singleData.description || `Single value field: ${key}`,
                        value: key
                    });
                });

                // Add tables with metadata
                Object.keys(podData.tables).forEach(tableName => {
                    const tableInfo = podData.tables[tableName];
                    if (tableInfo.data && Object.keys(tableInfo.data).length > 0) {

                        // Extract columns (exclude 'Keys')
                        const columns = Object.keys(tableInfo.data).filter(col => col !== 'Keys');
                        const rowCount = tableInfo.data.Keys ? tableInfo.data.Keys.length : 0;

                        output.push({
                            type: "table",
                            name: tableName,
                            description: tableInfo.description || `Table: ${tableName}`,
                            columns: columns,
                            rowCount: rowCount,
                            data: tableInfo.data
                        });
                    }
                });

                console.log('Generated POD entries:', output);
                return output;
            }

            static getUploadedFilesList() {
                const files = [];
                $('#filesContainer .uploaded-file').each(function() {
                    const fileName = $(this).find('.fw-bold').text();
                    const fileSize = $(this).find('.text-muted').text().split(' • ')[0];
                    files.push({
                        name: fileName,
                        size: fileSize,
                        uploadDate: new Date().toISOString()
                    });
                });
                return files;
            }

            // Load POD data from server
            static async loadPODFromServer() {
                const podId = getPODIdFromUrl();
                if (!podId) {
                    console.warn('No POD ID found for loading');
                    return false;
                }

                try {
                    console.log('🔄 Loading POD data from server...');

                    const response = await fetch(`/POD/LoadPODForEdit/${podId}`, {
                        method: 'GET',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });

                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }

                    const result = await response.json();

                    if (result.success) {
                        this.populateFormWithPODData(result.pod);

                        // Load entries in your format
                        if (result.pod.entries && result.pod.entries.length > 0) {
                            this.loadFromNewFormat(result.pod.entries);
                        }

                        console.log('✅ POD data loaded successfully from server');
                        return true;
                    } else {
                        throw new Error(result.message || 'Failed to load POD data');
                    }
                } catch (error) {
                    console.error('❌ Error loading POD data:', error);
                    alert.error('Error loading POD data: ' + error.message, {popup: false});
                    return false;
                }
            }

            // Load from your metadata format only
            static loadFromNewFormat(entriesData) {
                // Clear existing data
                podData = { singleValues: {}, tables: {} };
                $('#single-values-container').empty();
                $('#tables-container').empty();
                $('#no-single-values').show();
                $('#no-tables').show();

                entriesData.forEach(entry => {
                    if (entry.type === "single") {
                        this.loadSingleFromMetadata(entry);
                    } else if (entry.type === "table") {
                        this.loadTableFromMetadata(entry);
                    }
                });

                updateJsonPreview();
            }

            // Load single value from metadata
            static loadSingleFromMetadata(entry) {
                const fieldName = entry.name;
                const description = entry.description || '';

                // Add to podData
                podData.singleValues[fieldName] = {
                    description: description,
                    value: "(input)"
                };

                // Add to UI
                const singleHtml = `
                    <div class="single-entry" data-key="${fieldName}">
                        <div>
                            <strong class="text-dark">${fieldName}</strong>
                            <br><small class="text-muted">${description || 'No description'}</small>
                        </div>
                        <button class="btn btn-sm btn-outline-danger" onclick="removeSingleValue('${fieldName}')" title="Remove">
                            <i class="fa fa-trash"></i>
                        </button>
                    </div>
                `;

                $('#single-values-container').append(singleHtml);
                $('#no-single-values').hide();
            }

            // Load table from metadata
            static loadTableFromMetadata(entry) {
                const tableName = entry.name;
                const description = entry.description || '';
                const tableData = entry.data;
                const columns = entry.columns || [];
                const rowCount = entry.rowCount || 0;

                // Add to podData
                podData.tables[tableName] = {
                    description: description,
                    rows: rowCount,
                    fields: columns.length,
                    headers: columns,
                    data: tableData
                };

                // Use existing addTableFromData function
                addTableFromData(tableName, tableData);
            }

            // Populate form fields with POD data
            static populateFormWithPODData(pod) {
                try {
                    // Basic Information
                    setFormValue('podName', pod.name);
                    setFormValue('podCode', pod.podCode);
                    setFormValue('description', pod.description);

                    // Business References
                    setFormValue('poNumber', pod.poNumber);
                    setFormValue('contractNumber', pod.contractNumber);

                    // Organizational
                    setFormValue('categoryId', pod.categoryId);
                    setFormValue('departmentId', pod.departmentId);
                    setFormValue('vendorId', pod.vendorId || '');

                    // Processing Configuration
                    setFormValue('automationStatus', pod.automationStatus);
                    setFormValue('processingFrequency', pod.processingFrequency);
                    setFormValue('processingPriority', pod.processingPriority);

                    // SPOC
                    setFormValue('vendorSPOC', pod.vendorSPOC);
                    setFormValue('governorSPOC', pod.governorSPOC);
                    setFormValue('financeSPOC', pod.financeSPOC);

                    // Business Rules
                    setCheckboxValue('requiresApproval', pod.requiresApproval);
                    setCheckboxValue('containsFinancialData', pod.containsFinancialData);

                    console.log('✅ Form populated with POD data');
                } catch (error) {
                    console.error('❌ Error populating form:', error);
                }
            }
        }

        

        // Validation Class
        class PODValidator {
            static validate(podData) {
                const errors = [];

                if (!podData.name?.trim()) errors.push('POD Name is required');
                if (!podData.categoryId) errors.push('Category is required');
                if (!podData.departmentId) errors.push('Department is required');
                if (!podData.automationStatus) errors.push('Automation Status is required');
                if (!podData.processingFrequency) errors.push('Processing Frequency is required');
                if (!podData.processingPriority) errors.push('Processing Priority is required');

                return {
                    isValid: errors.length === 0,
                    errors: errors
                };
            }
        }

        // ✅ UPDATED: API Service Class with real server integration
        class PODService {

                   static async save(podData) {
            try {
                const podId = getPODIdFromUrl();
                if (!podId) {
                    throw new Error('No POD ID found for saving');
                }

                console.log('💾 Saving POD data to server...', podData);

                const response = await fetch(`/POD/SavePOD/${podId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                        // Temporarily remove CSRF for testing
                        // 'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                    },
                    body: JSON.stringify(podData)
                });

                // Get response text for debugging
                const responseText = await response.text();
                console.log('Server response status:', response.status);
                console.log('Server response text:', responseText);

                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${responseText}`);
                }

                // Try to parse as JSON
                let result;
                try {
                    result = JSON.parse(responseText);
                } catch (parseError) {
                    throw new Error(`Invalid JSON response: ${responseText}`);
                }

                if (!result.success) {
                    throw new Error(result.message || 'Failed to save POD');
                }

                return result;
            } catch (error) {
                console.error('❌ Error saving POD:', error);
                throw error;
            }
        }
        }

        // ✅ UPDATED: Main save function with real server integration
        async function savePOD() {
            try {
                // Collect form data using existing method
                const podFormData = PODDataManager.collectFormData();

                // Validate using existing validator
                const validation = PODValidator.validate(podFormData);
                if (!validation.isValid) {
                    alert.error('Please fix the following errors:\n\n' + validation.errors.join('\n'), {popup: false});
                    return;
                }

                // Confirm save
                if (!confirm('Save all changes to this POD?')) {
                    return;
                }

                // Show loading state
                const saveBtn = document.querySelector('button[onclick="savePOD()"]');
                const originalText = saveBtn.innerHTML;
                saveBtn.innerHTML = '<i class="fa fa-spinner fa-spin me-1"></i>Saving...';
                saveBtn.disabled = true;

                // Save to server using real API
                const result = await PODService.save(podFormData);

                // Success feedback
                alert.success('POD saved successfully!', {popup: false});
                console.log('✅ POD saved successfully:', result);

                // Update last modified display if exists
                updateLastModifiedDisplay(result.lastModified);

            } catch (error) {
                console.error('❌ Error in savePOD:', error);
                alert.error('Error saving POD: ' + error.message, {popup: false});
            } finally {
                // Reset button
                const saveBtn = document.querySelector('button[onclick="savePOD()"]');
                if (saveBtn) {
                    saveBtn.innerHTML = '<i class="fa fa-save me-1"></i>Save Changes';
                    saveBtn.disabled = false;
                }
            }
        }

        // =====================================================
        // HELPER FUNCTIONS
        // =====================================================

        // Get POD ID from URL
        function getPODIdFromUrl() {
            const urlParams = new URLSearchParams(window.location.search);
            const pathParts = window.location.pathname.split('/');
            return urlParams.get('id') || pathParts[pathParts.indexOf('Edit') + 1] || null;
        }

        // Set form field value
        function setFormValue(name, value) {
            const element = document.querySelector(`[name="${name}"]`);
            if (element) {
                element.value = value || '';
            }
        }

        // Set checkbox value
        function setCheckboxValue(name, checked) {
            const element = document.querySelector(`[name="${name}"]`);
            if (element) {
                element.checked = !!checked;
            }
        }

        // Update last modified display
        function updateLastModifiedDisplay(lastModified) {
            const lastModifiedElement = document.getElementById('last-modified');
            if (lastModifiedElement && lastModified) {
                lastModifiedElement.textContent = `Last modified: ${lastModified}`;
            }
        }

        // File upload functions
        function triggerFileUpload() {
            document.getElementById('fileInput').click();
        }

        function handleFileSelect(event) {
            const files = event.target.files;
            for (let i = 0; i < files.length; i++) {
                addFileToList(files[i]);
            }
        }

        function dropHandler(ev) {
            ev.preventDefault();
            ev.currentTarget.classList.remove('dragover');
            const files = ev.dataTransfer.files;
            for (let i = 0; i < files.length; i++) {
                addFileToList(files[i]);
            }
        }

        function dragOverHandler(ev) {
            ev.preventDefault();
        }

        function dragEnterHandler(ev) {
            ev.preventDefault();
            ev.currentTarget.classList.add('dragover');
        }

        function dragLeaveHandler(ev) {
            ev.preventDefault();
            ev.currentTarget.classList.remove('dragover');
        }

        function addFileToList(file) {
            const filesContainer = document.getElementById('filesContainer');
            const fileId = 'file_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);

            const fileElement = document.createElement('div');
            fileElement.className = 'uploaded-file';
            fileElement.id = fileId;

            const fileIcon = getFileIcon(file.name);
            const fileSize = formatFileSize(file.size);

            fileElement.innerHTML = `
                <div class="d-flex align-items-center">
                    <div class="file-icon">
                        <i class="fa ${fileIcon}"></i>
                    </div>
                    <div>
                        <div class="fw-bold text-dark">${file.name}</div>
                        <small class="text-muted">${fileSize} • Just uploaded</small>
                    </div>
                </div>
                <div class="btn-group">
                    <button type="button" class="btn btn-sm btn-outline-primary" onclick="downloadFile('${file.name}')" title="Download">
                        <i class="fa fa-download"></i>
                    </button>
                    <button type="button" class="btn btn-sm btn-outline-danger" onclick="removeFile(this)" title="Remove">
                        <i class="fa fa-trash"></i>
                    </button>
                </div>
            `;

            filesContainer.appendChild(fileElement);
            document.getElementById('noFilesMessage').style.display = 'none';
        }

        function getFileIcon(fileName) {
            const ext = fileName.split('.').pop().toLowerCase();
            switch(ext) {
                case 'pdf': return 'fa-file-pdf text-danger';
                case 'doc':
                case 'docx': return 'fa-file-word text-primary';
                case 'xls':
                case 'xlsx': return 'fa-file-excel text-success';
                case 'jpg':
                case 'jpeg':
                case 'png':
                case 'gif': return 'fa-file-image text-info';
                case 'txt': return 'fa-file-alt text-secondary';
                default: return 'fa-file text-muted';
            }
        }

        function formatFileSize(bytes) {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        }

        function removeFile(button) {
            button.closest('.uploaded-file').remove();
            const filesContainer = document.getElementById('filesContainer');
            if (filesContainer.children.length === 0) {
                document.getElementById('noFilesMessage').style.display = 'block';
            }
        }

        function downloadFile(fileName) {
            alert('Downloading: ' + fileName);
        }

        // POD Entry functions
        function showAddSingleModal() {
            $('#singleFieldName').val('');
            $('#singleDescription').val('');
            $('#addSingleModal').modal('show');
        }

        function showAddTableModal() {
            $('#tableName').val('');
            $('#tableDescription').val('');
            $('#tableRows').val(3);
            $('#tableFields').val(3);
            $('#addTableModal').modal('show');
        }

                 function addSingleValue() {
            const fieldName = $('#singleFieldName').val().trim();
            const description = $('#singleDescription').val().trim();

            if (!fieldName) {
                alert.warning('Please enter a field name', {popup: false});
                return;
            }

            // This is where single values should be added to podData.singleValues
            podData.singleValues[fieldName] = {
                description: description,
                value: "(input)"
            };

            // Add to UI
            const singleHtml = `
                <div class="single-entry" data-key="${fieldName}">
                    <div>
                        <strong class="text-dark">${fieldName}</strong>
                        <br><small class="text-muted">${description || 'No description'}</small>
                    </div>
                    <button class="btn btn-sm btn-outline-danger" onclick="removeSingleValue('${fieldName}')" title="Remove">
                        <i class="fa fa-trash"></i>
                    </button>
                </div>
            `;

            $('#single-values-container').append(singleHtml);
            $('#no-single-values').hide();
            $('#addSingleModal').modal('hide');
            updateJsonPreview();

            // DEBUG: Check what's in podData after adding
            console.log('After adding single value:', podData);
        }

        function addTable() {
            const tableName = $('#tableName').val().trim();
            const description = $('#tableDescription').val().trim();
            const rows = parseInt($('#tableRows').val());
            const fields = parseInt($('#tableFields').val());

            if (!tableName) {
                alert('Please enter a table name');
                return;
            }

            if (rows < 1 || rows > 20) {
                alert('Number of rows must be between 1 and 20');
                return;
            }

            if (fields < 1 || fields > 10) {
                alert('Number of fields must be between 1 and 10');
                return;
            }

            let tableHtml = `
                <div class="table-entry" data-table="${tableName}">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <div>
                            <h6 class="mb-0 text-dark">${tableName}</h6>
                            <small class="text-muted">${description || 'No description'}</small>
                        </div>
                        <div class="btn-group">
                            <button class="btn btn-sm btn-outline-success" onclick="addTableRow('${tableName}')" title="Add Row">
                                <i class="fa fa-plus me-1"></i>Add Row
                            </button>
                            <button class="btn btn-sm btn-outline-danger" onclick="removeTable('${tableName}')" title="Remove Table">
                                <i class="fa fa-trash me-1"></i>Remove Table
                            </button>
                        </div>
                    </div>
                    <div class="table-responsive">
                        <table class="table table-bordered entry-table">
                            <thead>
                                <tr>
                                    <th class="table-top-left"></th>
            `;

            for (let f = 1; f <= fields; f++) {
                tableHtml += `
                    <th>
                        <div class="input-group input-group-sm">
                            <input type="text" class="form-control" placeholder="Field ${f}" onchange="updateTableData('${tableName}')" style="font-size: 0.75rem;">
                            <button class="btn btn-outline-danger btn-sm" type="button" onclick="removeTableColumn(this, '${tableName}')" title="Delete Column" style="padding: 0.125rem 0.25rem;">
                                <i class="fa fa-times" style="font-size: 0.7rem;"></i>
                            </button>
                        </div>
                    </th>
                `;
            }
            tableHtml += `<th width="80">Action</th>`;
            tableHtml += `</tr></thead><tbody>`;

            for (let r = 1; r <= rows; r++) {
                tableHtml += `<tr>`;
                tableHtml += `<td><input type="text" placeholder="Key ${r}" onchange="updateTableData('${tableName}')"></td>`;
                for (let f = 1; f <= fields; f++) {
                    tableHtml += `<td><input type="text" placeholder="${getValue()}" onchange="updateTableData('${tableName}')"></td>`;
                }
                tableHtml += `<td><button class="btn btn-xs btn-outline-danger" onclick="removeTableRow(this, '${tableName}')" title="Delete Row"><i class="fa fa-trash"></i></button></td>`;
                tableHtml += `</tr>`;
            }

            tableHtml += `</tbody></table></div></div>`;

            $('#tables-container').append(tableHtml);
            $('#no-tables').hide();
            $('#addTableModal').modal('hide');

            podData.tables[tableName] = {
                description: description,
                rows: rows,
                fields: fields,
                headers: [],
                data: {}
            };

            updateJsonPreview();
        }

        function getValue() {
            const options = ['(input)', '0.99', '100', '(input)'];
            return options[Math.floor(Math.random() * options.length)];
        }

        function updateTableData(tableName) {
            const tableDiv = $(`[data-table="${tableName}"]`);
            const table = tableDiv.find('table');

            const headers = [];
            table.find('thead th input').each(function() {
                headers.push($(this).val().trim() || '');
            });

            const data = { Keys: [] };
            headers.forEach(header => {
                if (header) data[header] = [];
            });

            table.find('tbody tr').each(function() {
                const inputs = $(this).find('input');
                const key = inputs.eq(0).val().trim();
                if (key) {
                    data.Keys.push(key);
                    inputs.slice(1).each(function(index) {
                        const header = headers[index];
                        if (header) {
                            let value = $(this).val().trim();
                            if (value && !isNaN(value) && value !== '(input)') {
                                value = parseFloat(value);
                            }
                            data[header].push(value || '(input)');
                        }
                    });
                }
            });

            podData.tables[tableName].headers = headers.filter(h => h);
            podData.tables[tableName].data = data;

            updateJsonPreview();
        }

        function removeSingleValue(key) {
            if (confirm(`Remove single value "${key}"?`)) {
                delete podData.singleValues[key];
                $(`[data-key="${key}"]`).remove();

                if (Object.keys(podData.singleValues).length === 0) {
                    $('#no-single-values').show();
                }
                updateJsonPreview();
            }
        }

        function updateJsonPreview() {
            const output = [];

            Object.keys(podData.singleValues).forEach(key => {
                output.push(key);
            });

            Object.keys(podData.tables).forEach(tableName => {
                const tableData = podData.tables[tableName];
                if (tableData.data && Object.keys(tableData.data).length > 0) {
                    const tableObject = {};
                    tableObject[tableName] = tableData.data;
                    output.push(tableObject);
                }
            });

            $('#json-preview').text(JSON.stringify(output, null, 2));
        }

        function removeTable(tableName) {
            if (confirm(`Remove table "${tableName}"?`)) {
                delete podData.tables[tableName];
                $(`[data-table="${tableName}"]`).remove();

                if (Object.keys(podData.tables).length === 0) {
                    $('#no-tables').show();
                }
                updateJsonPreview();
            }
        }

        function addTableFromData(tableName, tableData) {
            if (!tableData.Keys || !Array.isArray(tableData.Keys)) return;

            const keys = tableData.Keys;
            const fieldNames = Object.keys(tableData).filter(key => key !== 'Keys');
            const rows = keys.length;
            const fields = fieldNames.length;

            let tableHtml = `
                <div class="table-entry" data-table="${tableName}">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <div>
                            <h6 class="mb-0 text-dark">${tableName}</h6>
                            <small class="text-muted">Loaded from existing data</small>
                        </div>
                        <div class="btn-group">
                            <button class="btn btn-sm btn-outline-success" onclick="addTableRow('${tableName}')" title="Add Row">
                                <i class="fa fa-plus me-1"></i>Add Row
                            </button>
                            <button class="btn btn-sm btn-outline-danger" onclick="removeTable('${tableName}')" title="Remove Table">
                                <i class="fa fa-trash me-1"></i>Remove Table
                            </button>
                        </div>
                    </div>
                    <div class="table-responsive">
                        <table class="table table-bordered entry-table">
                            <thead>
                                <tr>
                                    <th class="table-top-left"></th>
            `;

            fieldNames.forEach((fieldName, index) => {
                tableHtml += `
                    <th>
                        <div class="input-group input-group-sm">
                            <input type="text" class="form-control" value="${fieldName}" onchange="updateTableData('${tableName}')" style="font-size: 0.75rem;">
                            <button class="btn btn-outline-danger btn-sm" type="button" onclick="removeTableColumn(this, '${tableName}')" title="Delete Column" style="padding: 0.125rem 0.25rem;">
                                <i class="fa fa-times" style="font-size: 0.7rem;"></i>
                            </button>
                        </div>
                    </th>
                `;
            });
            tableHtml += `<th width="80">Action</th>`;
            tableHtml += `</tr></thead><tbody>`;

            keys.forEach((key, rowIndex) => {
                tableHtml += `<tr>`;
                tableHtml += `<td><input type="text" value="${key}" onchange="updateTableData('${tableName}')"></td>`;
                fieldNames.forEach(fieldName => {
                    const value = tableData[fieldName] && tableData[fieldName][rowIndex] !== undefined
                        ? tableData[fieldName][rowIndex]
                        : '';
                    tableHtml += `<td><input type="text" value="${value}" onchange="updateTableData('${tableName}')"></td>`;
                });
                tableHtml += `<td><button class="btn btn-xs btn-outline-danger" onclick="removeTableRow(this, '${tableName}')" title="Delete Row"><i class="fa fa-trash"></i></button></td>`;
                tableHtml += `</tr>`;
            });

            tableHtml += `</tbody></table></div></div>`;

            $('#tables-container').append(tableHtml);
            $('#no-tables').hide();

            podData.tables[tableName] = {
                description: 'Loaded from existing data',
                rows: rows,
                fields: fields,
                headers: fieldNames,
                data: tableData
            };
        }

        // Add row to existing table
        function addTableRow(tableName) {
            const tableDiv = $(`[data-table="${tableName}"]`);
            const table = tableDiv.find('table tbody');
            const headerInputs = tableDiv.find('thead th input');
            const fieldsCount = headerInputs.length;

            let newRowHtml = `<tr>`;
            newRowHtml += `<td><input type="text" placeholder="New Key" onchange="updateTableData('${tableName}')"></td>`;
            for (let f = 0; f < fieldsCount; f++) {
                newRowHtml += `<td><input type="text" placeholder="${getValue()}" onchange="updateTableData('${tableName}')"></td>`;
            }
            newRowHtml += `<td><button class="btn btn-xs btn-outline-danger" onclick="removeTableRow(this, '${tableName}')" title="Delete Row"><i class="fa fa-trash"></i></button></td>`;
            newRowHtml += `</tr>`;

            table.append(newRowHtml);
            updateTableData(tableName);
        }

        // Remove specific table row
        function removeTableRow(button, tableName) {
            if (confirm('Remove this row?')) {
                $(button).closest('tr').remove();
                updateTableData(tableName);
            }
        }

        // Remove table column
        function removeTableColumn(button, tableName) {
            if (confirm('Remove this column? This will delete all data in this column.')) {
                const th = $(button).closest('th');
                const columnIndex = th.index() - 1; // -1 because first column is the key column

                // Remove header
                th.remove();

                // Remove all cells in this column from all rows
                const tableDiv = $(`[data-table="${tableName}"]`);
                const table = tableDiv.find('table tbody');

                table.find('tr').each(function() {
                    $(this).find('td').eq(columnIndex + 1).remove(); // +1 because first td is key column
                });

                // Update the data
                updateTableData(tableName);
            }
        }

        function loadSampleData() {
            const sampleData = [
                "Test 1",
                {
                    "Test table": {
                        "Keys": ["kpi1", "kpi2", "kpi3"],
                        "Target": [99, 99, 89],
                        "weight": [89, 90, 78],
                        "Threshold": [69, 78, 30]
                    }
                }
            ];

            loadFromJson(sampleData);
        }
        // Clean loading function - your format only
        function loadFromJson(jsonData) {
            if (!Array.isArray(jsonData)) return;

            PODDataManager.loadFromNewFormat(jsonData);
        }
        

       function addSingleValueFromData(fieldName) {
            // This should add to podData.singleValues
            podData.singleValues[fieldName] = {
                description: '',
                value: "(input)"
            };

            // Add to UI
            const singleHtml = `
                <div class="single-entry" data-key="${fieldName}">
                    <div>
                        <strong class="text-dark">${fieldName}</strong>
                        <br><small class="text-muted">No description</small>
                    </div>
                    <button class="btn btn-sm btn-outline-danger" onclick="removeSingleValue('${fieldName}')" title="Remove">
                        <i class="fa fa-trash"></i>
                    </button>
                </div>
            `;

            $('#single-values-container').append(singleHtml);
            $('#no-single-values').hide();

            // DEBUG: Check what's in podData after loading
            console.log('After loading single value from server:', podData);
        }

        function cancelEdit() {
            if (confirm('Discard all changes and return to POD list?')) {
                alert('Changes discarded. Returning to POD list...');
            }
        }

        // ✅ UPDATED: Initialize with server loading
        $(document).ready(async function() {
            console.log('🟢 Initializing POD Edit Page');

            // Load POD data from server if in edit mode
            const podId = getPODIdFromUrl();
            if (podId) {
                console.log('📥 Edit mode detected, loading POD data...');
                const loaded = await PODDataManager.loadPODFromServer();
                if (!loaded) {
                    console.warn('⚠️ Failed to load POD data from server, using empty form');
                }
            } else {
                console.log('➕ Create mode detected, using empty form');
            }

            // Initialize JSON preview
            updateJsonPreview();

            console.log('✅ POD Edit Page initialized successfully');
        });
    </script>

}