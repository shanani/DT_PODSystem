// <auto-generated />
using System;
using DT_PODSystem.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DT_PODSystem.Migrations.ApplicationDb
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250807003615_Update1")]
    partial class Update1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DT_PODSystem.Models.Entities.AuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AdditionalData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AffectedColumns")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CorrelationId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("EntityName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<long>("ExecutionTimeMs")
                        .HasColumnType("bigint");

                    b.Property<string>("HttpMethod")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsFinancialData")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSuccess")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NewValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("RequiresApproval")
                        .HasColumnType("bit");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("SecurityLevel")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StackTrace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("IX_AuditLog_CreatedDate");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_AuditLog_IsActive");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("DT_PODSystem.Models.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ColorCode")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("#A54EE1");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("IconClass")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("fa fa-folder");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("IX_Category_CreatedDate");

                    b.HasIndex("DisplayOrder");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Category_IsActive");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ColorCode = "#A54EE1",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 8, 7, 0, 36, 13, 749, DateTimeKind.Utc).AddTicks(9094),
                            Description = "Financial and accounting related documents",
                            DisplayOrder = 1,
                            IconClass = "fa fa-dollar-sign",
                            IsActive = true,
                            Name = "MSP Certificates"
                        },
                        new
                        {
                            Id = 2,
                            ColorCode = "#4F008C",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 8, 7, 0, 36, 13, 749, DateTimeKind.Utc).AddTicks(9099),
                            Description = "Legal contracts and agreements",
                            DisplayOrder = 2,
                            IconClass = "fa fa-balance-scale",
                            IsActive = true,
                            Name = "Financial Documents"
                        },
                        new
                        {
                            Id = 3,
                            ColorCode = "#00C48C",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 8, 7, 0, 36, 13, 749, DateTimeKind.Utc).AddTicks(9103),
                            Description = "Human resources and personnel documents",
                            DisplayOrder = 3,
                            IconClass = "fa fa-users",
                            IsActive = true,
                            Name = "HR Documents"
                        },
                        new
                        {
                            Id = 4,
                            ColorCode = "#FF6B6B",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 8, 7, 0, 36, 13, 749, DateTimeKind.Utc).AddTicks(9106),
                            Description = "Legal contracts, agreements, and compliance documents",
                            DisplayOrder = 4,
                            IconClass = "fa fa-gavel",
                            IsActive = true,
                            Name = "Legal Documents"
                        },
                        new
                        {
                            Id = 5,
                            ColorCode = "#4ECDC4",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 8, 7, 0, 36, 13, 749, DateTimeKind.Utc).AddTicks(9110),
                            Description = "Purchase orders, contracts, and procurement related documents",
                            DisplayOrder = 5,
                            IconClass = "fa fa-shopping-cart",
                            IsActive = true,
                            Name = "Procurement Documents"
                        });
                });

            modelBuilder.Entity("DT_PODSystem.Models.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<int>("GeneralDirectorateId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("ManagerName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("IX_Department_CreatedDate");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Department_IsActive");

                    b.HasIndex("Name");

                    b.HasIndex("GeneralDirectorateId", "DisplayOrder");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ContactEmail = "ahmed.rashid@company.sa",
                            ContactPhone = "+966-11-1234567",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 8, 7, 0, 36, 13, 749, DateTimeKind.Utc).AddTicks(9449),
                            Description = "Application development and maintenance",
                            DisplayOrder = 1,
                            GeneralDirectorateId = 1,
                            IsActive = true,
                            ManagerName = "Ahmed Al-Rashid",
                            Name = "Software Development"
                        },
                        new
                        {
                            Id = 2,
                            ContactEmail = "sara.mahmoud@company.sa",
                            ContactPhone = "+966-11-1234568",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 8, 7, 0, 36, 13, 749, DateTimeKind.Utc).AddTicks(9454),
                            Description = "IT infrastructure, networking, and security",
                            DisplayOrder = 2,
                            GeneralDirectorateId = 1,
                            IsActive = true,
                            ManagerName = "Sara Al-Mahmoud",
                            Name = "Infrastructure and Networks"
                        },
                        new
                        {
                            Id = 3,
                            ContactEmail = "omar.fahad@company.sa",
                            ContactPhone = "+966-11-1234569",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 8, 7, 0, 36, 13, 749, DateTimeKind.Utc).AddTicks(9458),
                            Description = "Business intelligence and data analysis",
                            DisplayOrder = 3,
                            GeneralDirectorateId = 1,
                            IsActive = true,
                            ManagerName = "Omar Al-Fahad",
                            Name = "Data Analytics"
                        },
                        new
                        {
                            Id = 4,
                            ContactEmail = "fatima.zahra@company.sa",
                            ContactPhone = "+966-11-1234570",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 8, 7, 0, 36, 13, 749, DateTimeKind.Utc).AddTicks(9463),
                            Description = "Budget planning and financial forecasting",
                            DisplayOrder = 1,
                            GeneralDirectorateId = 2,
                            IsActive = true,
                            ManagerName = "Fatima Al-Zahra",
                            Name = "Financial Planning"
                        },
                        new
                        {
                            Id = 5,
                            ContactEmail = "khalid.otaibi@company.sa",
                            ContactPhone = "+966-11-1234571",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 8, 7, 0, 36, 13, 749, DateTimeKind.Utc).AddTicks(9466),
                            Description = "Vendor payments and expense management",
                            DisplayOrder = 2,
                            GeneralDirectorateId = 2,
                            IsActive = true,
                            ManagerName = "Khalid Al-Otaibi",
                            Name = "Accounts Payable"
                        },
                        new
                        {
                            Id = 6,
                            ContactEmail = "noura.saud@company.sa",
                            ContactPhone = "+966-11-1234572",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 8, 7, 0, 36, 13, 749, DateTimeKind.Utc).AddTicks(9578),
                            Description = "Cash management and financial investments",
                            DisplayOrder = 3,
                            GeneralDirectorateId = 2,
                            IsActive = true,
                            ManagerName = "Noura Al-Saud",
                            Name = "Treasury"
                        },
                        new
                        {
                            Id = 7,
                            ContactEmail = "maha.ghamdi@company.sa",
                            ContactPhone = "+966-11-1234573",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 8, 7, 0, 36, 13, 749, DateTimeKind.Utc).AddTicks(9582),
                            Description = "Recruitment and onboarding",
                            DisplayOrder = 1,
                            GeneralDirectorateId = 3,
                            IsActive = true,
                            ManagerName = "Maha Al-Ghamdi",
                            Name = "Talent Acquisition"
                        },
                        new
                        {
                            Id = 8,
                            ContactEmail = "ibrahim.harbi@company.sa",
                            ContactPhone = "+966-11-1234574",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 8, 7, 0, 36, 13, 749, DateTimeKind.Utc).AddTicks(9586),
                            Description = "Training and professional development",
                            DisplayOrder = 2,
                            GeneralDirectorateId = 3,
                            IsActive = true,
                            ManagerName = "Ibrahim Al-Harbi",
                            Name = "Employee Development"
                        },
                        new
                        {
                            Id = 9,
                            ContactEmail = "abdullah.mutairi@company.sa",
                            ContactPhone = "+966-11-1234575",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 8, 7, 0, 36, 13, 749, DateTimeKind.Utc).AddTicks(9589),
                            Description = "Building maintenance and facility operations",
                            DisplayOrder = 1,
                            GeneralDirectorateId = 4,
                            IsActive = true,
                            ManagerName = "Abdullah Al-Mutairi",
                            Name = "Facility Management"
                        },
                        new
                        {
                            Id = 10,
                            ContactEmail = "reem.johani@company.sa",
                            ContactPhone = "+966-11-1234576",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 8, 7, 0, 36, 13, 749, DateTimeKind.Utc).AddTicks(9593),
                            Description = "Physical and information security",
                            DisplayOrder = 2,
                            GeneralDirectorateId = 4,
                            IsActive = true,
                            ManagerName = "Reem Al-Johani",
                            Name = "Security Operations"
                        },
                        new
                        {
                            Id = 11,
                            ContactEmail = "yousef.dosari@company.sa",
                            ContactPhone = "+966-11-1234577",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 8, 7, 0, 36, 13, 749, DateTimeKind.Utc).AddTicks(9598),
                            Description = "Contract negotiation and management",
                            DisplayOrder = 1,
                            GeneralDirectorateId = 5,
                            IsActive = true,
                            ManagerName = "Yousef Al-Dosari",
                            Name = "Contract Management"
                        },
                        new
                        {
                            Id = 12,
                            ContactEmail = "layla.shammari@company.sa",
                            ContactPhone = "+966-11-1234578",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 8, 7, 0, 36, 13, 749, DateTimeKind.Utc).AddTicks(9601),
                            Description = "Regulatory compliance and auditing",
                            DisplayOrder = 2,
                            GeneralDirectorateId = 5,
                            IsActive = true,
                            ManagerName = "Layla Al-Shammari",
                            Name = "Regulatory Compliance"
                        });
                });

            modelBuilder.Entity("DT_PODSystem.Models.Entities.FieldMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BorderColor")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("#A54EE1");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("DataType")
                        .HasColumnType("int");

                    b.Property<string>("DefaultValue")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("FieldName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Height")
                        .HasPrecision(18, 6)
                        .HasColumnType("float(18)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsVisible")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<decimal?>("MaxValue")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("MinValue")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OCRConfidenceThreshold")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(5, 4)
                        .HasColumnType("decimal(5,4)")
                        .HasDefaultValue(0.7m);

                    b.Property<string>("OCRLanguage")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("eng");

                    b.Property<int>("PageNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("TemplateId")
                        .HasColumnType("int");

                    b.Property<bool>("UseOCR")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("ValidationMessage")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ValidationPattern")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<double>("Width")
                        .HasPrecision(18, 6)
                        .HasColumnType("float(18)");

                    b.Property<double>("X")
                        .HasPrecision(18, 6)
                        .HasColumnType("float(18)");

                    b.Property<double>("Y")
                        .HasPrecision(18, 6)
                        .HasColumnType("float(18)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("IX_FieldMapping_CreatedDate");

                    b.HasIndex("DataType");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_FieldMapping_IsActive");

                    b.HasIndex("TemplateId", "DisplayOrder");

                    b.HasIndex("TemplateId", "FieldName")
                        .IsUnique();

                    b.HasIndex("TemplateId", "PageNumber");

                    b.ToTable("FieldMappings");
                });

            modelBuilder.Entity("DT_PODSystem.Models.Entities.FormulaCanvas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CanvasState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FormulaExpression")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Height")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(800);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsValid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastValidated")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("QueryId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("ValidationErrors")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Version")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("1.0");

                    b.Property<int>("Width")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1200);

                    b.Property<decimal>("ZoomLevel")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)")
                        .HasDefaultValue(1.0m);

                    b.HasKey("Id");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("IX_FormulaCanvas_CreatedDate");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_FormulaCanvas_IsActive");

                    b.HasIndex("QueryId")
                        .IsUnique();

                    b.ToTable("FormulaCanvases");
                });

            modelBuilder.Entity("DT_PODSystem.Models.Entities.GeneralDirectorate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("ManagerName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("IX_GeneralDirectorate_CreatedDate");

                    b.HasIndex("DisplayOrder");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_GeneralDirectorate_IsActive");

                    b.HasIndex("Name");

                    b.ToTable("GeneralDirectorates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 8, 7, 0, 36, 13, 749, DateTimeKind.Utc).AddTicks(9384),
                            Description = "IT systems, software, and technology services",
                            DisplayOrder = 1,
                            IsActive = true,
                            Name = "Information Technology"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 8, 7, 0, 36, 13, 749, DateTimeKind.Utc).AddTicks(9389),
                            Description = "Financial operations, budgeting, and administrative services",
                            DisplayOrder = 2,
                            IsActive = true,
                            Name = "Finance and Administration"
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 8, 7, 0, 36, 13, 749, DateTimeKind.Utc).AddTicks(9392),
                            Description = "Personnel management, training, and development",
                            DisplayOrder = 3,
                            IsActive = true,
                            Name = "Human Resources"
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 8, 7, 0, 36, 13, 749, DateTimeKind.Utc).AddTicks(9395),
                            Description = "Operational activities and facility maintenance",
                            DisplayOrder = 4,
                            IsActive = true,
                            Name = "Operations and Maintenance"
                        },
                        new
                        {
                            Id = 5,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 8, 7, 0, 36, 13, 749, DateTimeKind.Utc).AddTicks(9398),
                            Description = "Legal affairs, regulatory compliance, and risk management",
                            DisplayOrder = 5,
                            IsActive = true,
                            Name = "Legal and Compliance"
                        });
                });

            modelBuilder.Entity("DT_PODSystem.Models.Entities.POD", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("AutomationStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ContractNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("FinanceSPOCUsername")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Frequency")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("GovernorSPOCUsername")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsFinancialData")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastProcessedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PODCode")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("PONumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ProcessedCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("ProcessingPriority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(5);

                    b.Property<bool>("RequiresApproval")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int?>("VendorId")
                        .HasColumnType("int");

                    b.Property<string>("VendorSPOCUsername")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Version")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AutomationStatus");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ContractNumber");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("IX_POD_CreatedDate");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("Frequency");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_POD_IsActive");

                    b.HasIndex("IsFinancialData");

                    b.HasIndex("Name");

                    b.HasIndex("PODCode")
                        .IsUnique();

                    b.HasIndex("PONumber");

                    b.HasIndex("Status");

                    b.HasIndex("VendorId");

                    b.ToTable("PODs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApprovalDate = new DateTime(2025, 7, 8, 0, 36, 13, 749, DateTimeKind.Utc).AddTicks(9853),
                            ApprovedBy = "IT Director",
                            AutomationStatus = 3,
                            CategoryId = 1,
                            ContractNumber = "CTR-ERP-2025",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 6, 7, 0, 36, 13, 749, DateTimeKind.Utc).AddTicks(9865),
                            DepartmentId = 1,
                            Description = "Complete ERP system implementation for financial and operational modules",
                            FinanceSPOCUsername = "fatima.finance",
                            Frequency = 1,
                            GovernorSPOCUsername = "sara.governor",
                            IsActive = true,
                            IsFinancialData = true,
                            LastProcessedDate = new DateTime(2025, 8, 2, 0, 36, 13, 749, DateTimeKind.Utc).AddTicks(9863),
                            Name = "ERP System Implementation",
                            PODCode = "POD-ERP-2025-001",
                            PONumber = "PO-2025-IT-001",
                            ProcessedCount = 15,
                            ProcessingPriority = 8,
                            RequiresApproval = true,
                            Status = 4,
                            VendorId = 1,
                            VendorSPOCUsername = "ahmad.vendor",
                            Version = "1.0"
                        },
                        new
                        {
                            Id = 2,
                            ApprovalDate = new DateTime(2025, 6, 23, 0, 36, 13, 749, DateTimeKind.Utc).AddTicks(9881),
                            ApprovedBy = "Finance Director",
                            AutomationStatus = 1,
                            CategoryId = 2,
                            ContractNumber = "CTR-FIN-2025-A",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 5, 7, 0, 36, 13, 749, DateTimeKind.Utc).AddTicks(9889),
                            DepartmentId = 4,
                            Description = "Automated processing of monthly financial reports and compliance documents",
                            FinanceSPOCUsername = "noura.finance",
                            Frequency = 1,
                            GovernorSPOCUsername = "khalid.governor",
                            IsActive = true,
                            IsFinancialData = true,
                            LastProcessedDate = new DateTime(2025, 8, 5, 0, 36, 13, 749, DateTimeKind.Utc).AddTicks(9887),
                            Name = "Financial Reporting Automation",
                            PODCode = "POD-FIN-2025-002",
                            PONumber = "PO-2025-FIN-002",
                            ProcessedCount = 8,
                            ProcessingPriority = 9,
                            RequiresApproval = true,
                            Status = 4,
                            VendorId = 2,
                            VendorSPOCUsername = "mariam.vendor",
                            Version = "1.2"
                        },
                        new
                        {
                            Id = 3,
                            AutomationStatus = 2,
                            CategoryId = 3,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 7, 23, 0, 36, 13, 749, DateTimeKind.Utc).AddTicks(9902),
                            DepartmentId = 7,
                            Description = "Employee performance reviews and development tracking system",
                            FinanceSPOCUsername = "fatima.finance",
                            Frequency = 2,
                            GovernorSPOCUsername = "maha.governor",
                            IsActive = true,
                            IsFinancialData = false,
                            Name = "HR Performance Management",
                            PODCode = "POD-HR-2025-003",
                            ProcessedCount = 0,
                            ProcessingPriority = 6,
                            RequiresApproval = true,
                            Status = 2,
                            VendorId = 3,
                            VendorSPOCUsername = "mohammed.vendor",
                            Version = "1.0"
                        },
                        new
                        {
                            Id = 4,
                            AutomationStatus = 1,
                            CategoryId = 5,
                            ContractNumber = "CTR-MAINT-2025",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 7, 31, 0, 36, 13, 749, DateTimeKind.Utc).AddTicks(9924),
                            DepartmentId = 9,
                            Description = "Processing of facility maintenance requests and contract compliance",
                            FinanceSPOCUsername = "khalid.finance",
                            Frequency = 1,
                            GovernorSPOCUsername = "abdullah.governor",
                            IsActive = true,
                            IsFinancialData = true,
                            Name = "Facility Maintenance Contracts",
                            PODCode = "POD-OPS-2025-004",
                            PONumber = "PO-2025-OPS-004",
                            ProcessedCount = 0,
                            ProcessingPriority = 4,
                            RequiresApproval = false,
                            Status = 1,
                            Version = "1.0"
                        },
                        new
                        {
                            Id = 5,
                            ApprovalDate = new DateTime(2025, 7, 18, 0, 36, 13, 749, DateTimeKind.Utc).AddTicks(9945),
                            ApprovedBy = "Legal Director",
                            AutomationStatus = 3,
                            CategoryId = 4,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 7, 7, 0, 36, 13, 749, DateTimeKind.Utc).AddTicks(9952),
                            DepartmentId = 12,
                            Description = "Regulatory compliance reports and legal documentation processing",
                            FinanceSPOCUsername = "noura.finance",
                            Frequency = 2,
                            GovernorSPOCUsername = "layla.governor",
                            IsActive = true,
                            IsFinancialData = true,
                            LastProcessedDate = new DateTime(2025, 7, 28, 0, 36, 13, 749, DateTimeKind.Utc).AddTicks(9950),
                            Name = "Legal Compliance Reporting",
                            PODCode = "POD-LEG-2025-005",
                            ProcessedCount = 3,
                            ProcessingPriority = 7,
                            RequiresApproval = true,
                            Status = 4,
                            VendorId = 5,
                            VendorSPOCUsername = "hassan.vendor",
                            Version = "1.1"
                        });
                });

            modelBuilder.Entity("DT_PODSystem.Models.Entities.PODAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ApprovalNotes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DisplayOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime?>("DocumentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocumentNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DocumentStatus")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Active");

                    b.Property<string>("DocumentVersion")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsPrimary")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("IssuedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PODId")
                        .HasColumnType("int");

                    b.Property<bool>("RequiresApproval")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int>("UploadedFileId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("IX_PODAttachment_CreatedDate");

                    b.HasIndex("DisplayOrder");

                    b.HasIndex("DocumentDate");

                    b.HasIndex("DocumentNumber");

                    b.HasIndex("DocumentStatus");

                    b.HasIndex("ExpiryDate");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_PODAttachment_IsActive");

                    b.HasIndex("IsPrimary");

                    b.HasIndex("Type");

                    b.HasIndex("UploadedFileId");

                    b.HasIndex("PODId", "UploadedFileId")
                        .IsUnique();

                    b.ToTable("PODAttachments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApprovalDate = new DateTime(2025, 6, 10, 0, 36, 13, 750, DateTimeKind.Utc).AddTicks(68),
                            ApprovedBy = "Legal Director",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 6, 8, 0, 36, 13, 750, DateTimeKind.Utc).AddTicks(70),
                            Description = "Primary contract document for ERP system implementation",
                            DisplayName = "Main ERP Implementation Contract",
                            DisplayOrder = 1,
                            DocumentDate = new DateTime(2025, 6, 8, 0, 36, 13, 750, DateTimeKind.Utc).AddTicks(63),
                            DocumentNumber = "CTR-ERP-2025-001",
                            DocumentStatus = "Active",
                            DocumentVersion = "1.0",
                            IsActive = true,
                            IsPrimary = true,
                            IssuedBy = "Legal Department",
                            PODId = 1,
                            RequiresApproval = true,
                            Type = 1,
                            UploadedFileId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 7, 23, 0, 36, 13, 750, DateTimeKind.Utc).AddTicks(78),
                            Description = "Standard operating procedures for HR performance management",
                            DisplayName = "HR Policy and Procedures",
                            DisplayOrder = 1,
                            DocumentDate = new DateTime(2025, 7, 23, 0, 36, 13, 750, DateTimeKind.Utc).AddTicks(75),
                            DocumentNumber = "SOP-HR-2025-001",
                            DocumentStatus = "Active",
                            DocumentVersion = "2.1",
                            IsActive = true,
                            IsPrimary = true,
                            IssuedBy = "HR Department",
                            PODId = 3,
                            RequiresApproval = false,
                            Type = 3,
                            UploadedFileId = 3
                        });
                });

            modelBuilder.Entity("DT_PODSystem.Models.Entities.PdfTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int?>("ExpectedPageCount")
                        .HasColumnType("int");

                    b.Property<string>("ExpectedPdfVersion")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("HasFormFields")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("LastProcessedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NamingConvention")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PODId")
                        .HasColumnType("int");

                    b.Property<int>("ProcessedCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("ProcessingPriority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(5);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("TechnicalNotes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("VendorId")
                        .HasColumnType("int");

                    b.Property<string>("Version")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("IX_PdfTemplate_CreatedDate");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_PdfTemplate_IsActive");

                    b.HasIndex("NamingConvention");

                    b.HasIndex("PODId");

                    b.HasIndex("Status");

                    b.HasIndex("VendorId");

                    b.ToTable("PdfTemplates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApprovalDate = new DateTime(2025, 7, 8, 0, 36, 13, 750, DateTimeKind.Utc).AddTicks(128),
                            ApprovedBy = "IT Director",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 7, 8, 0, 36, 13, 750, DateTimeKind.Utc).AddTicks(133),
                            ExpectedPageCount = 3,
                            ExpectedPdfVersion = "1.7",
                            HasFormFields = false,
                            IsActive = true,
                            LastProcessedDate = new DateTime(2025, 8, 2, 0, 36, 13, 750, DateTimeKind.Utc).AddTicks(130),
                            NamingConvention = "ERP_INV_{YYYYMM}",
                            PODId = 1,
                            ProcessedCount = 15,
                            ProcessingPriority = 8,
                            Status = 2,
                            TechnicalNotes = "Requires OCR preprocessing for invoice amounts",
                            Title = "Untitled Template",
                            Version = "1.2"
                        },
                        new
                        {
                            Id = 2,
                            ApprovalDate = new DateTime(2025, 6, 23, 0, 36, 13, 750, DateTimeKind.Utc).AddTicks(220),
                            ApprovedBy = "Finance Director",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 6, 23, 0, 36, 13, 750, DateTimeKind.Utc).AddTicks(225),
                            ExpectedPageCount = 5,
                            ExpectedPdfVersion = "1.6",
                            HasFormFields = true,
                            IsActive = true,
                            LastProcessedDate = new DateTime(2025, 8, 5, 0, 36, 13, 750, DateTimeKind.Utc).AddTicks(222),
                            NamingConvention = "FIN_RPT_{YYYYMM}_{DD}",
                            PODId = 2,
                            ProcessedCount = 8,
                            ProcessingPriority = 9,
                            Status = 2,
                            TechnicalNotes = "Multi-page template with dynamic table extraction",
                            Title = "Untitled Template",
                            Version = "2.0"
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 7, 28, 0, 36, 13, 750, DateTimeKind.Utc).AddTicks(231),
                            ExpectedPageCount = 8,
                            ExpectedPdfVersion = "1.7",
                            HasFormFields = true,
                            IsActive = true,
                            NamingConvention = "LEG_COMP_{YYYY}Q{Q}",
                            PODId = 5,
                            ProcessedCount = 0,
                            ProcessingPriority = 7,
                            Status = 0,
                            TechnicalNotes = "Quarterly compliance template with signature verification",
                            Title = "Untitled Template",
                            Version = "1.0"
                        });
                });

            modelBuilder.Entity("DT_PODSystem.Models.Entities.ProcessedField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("CalculationConfidence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CurrencySymbol")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("DecimalPlaces")
                        .HasColumnType("int");

                    b.Property<decimal>("ExtractionConfidence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<int>("FieldMappingId")
                        .HasColumnType("int");

                    b.Property<string>("FieldName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsValid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OutputDataType")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("String");

                    b.Property<string>("OutputValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProcessedFileId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("ValidationErrors")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("IX_ProcessedField_CreatedDate");

                    b.HasIndex("FieldMappingId");

                    b.HasIndex("FieldName");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_ProcessedField_IsActive");

                    b.HasIndex("IsValid");

                    b.HasIndex("OutputDataType");

                    b.HasIndex("ProcessedFileId");

                    b.ToTable("ProcessedFields");
                });

            modelBuilder.Entity("DT_PODSystem.Models.Entities.ProcessedFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AnchorConfidence")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("AnchorDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AnchorsConfigured")
                        .HasColumnType("int");

                    b.Property<int>("AnchorsFound")
                        .HasColumnType("int");

                    b.Property<int>("AnchorsMatched")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("HasFinancialInfo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("NeedApproval")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("OrganizedFilePath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("OriginalFilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("PdfTemplateId")
                        .HasColumnType("int");

                    b.Property<string>("PeriodId")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<DateTime>("ProcessedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("ProcessingMessage")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Pending");

                    b.Property<int>("TemplateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("IX_ProcessedFile_CreatedDate");

                    b.HasIndex("HasFinancialInfo");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_ProcessedFile_IsActive");

                    b.HasIndex("NeedApproval");

                    b.HasIndex("PdfTemplateId");

                    b.HasIndex("PeriodId");

                    b.HasIndex("ProcessedDate");

                    b.HasIndex("Status");

                    b.HasIndex("TemplateId");

                    b.HasIndex("TemplateId", "PeriodId");

                    b.ToTable("ProcessedFiles");
                });

            modelBuilder.Entity("DT_PODSystem.Models.Entities.Query", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("ExecutionCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("ExecutionPriority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(5);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("LastExecutedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Version")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("IX_Query_CreatedDate");

                    b.HasIndex("ExecutionPriority");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Query_IsActive");

                    b.HasIndex("Name");

                    b.HasIndex("Status");

                    b.ToTable("Queries");
                });

            modelBuilder.Entity("DT_PODSystem.Models.Entities.QueryConstant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("DataType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("DefaultValue")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("InputType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsConstant")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsGlobal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("QueryId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("SelectOptions")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("SystemSource")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ValidationMessage")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ValidationPattern")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("IX_QueryConstant_CreatedDate");

                    b.HasIndex("DisplayOrder");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_QueryConstant_IsActive");

                    b.HasIndex("IsGlobal");

                    b.HasIndex("Name");

                    b.HasIndex("QueryId", "Name")
                        .IsUnique()
                        .HasFilter("[QueryId] IS NOT NULL");

                    b.ToTable("QueryConstants");
                });

            modelBuilder.Entity("DT_PODSystem.Models.Entities.QueryOutput", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CurrencySymbol")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("DataType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int>("DecimalPlaces")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(2);

                    b.Property<string>("DefaultValue")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DisplayOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("ExecutionOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("FormatString")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("N2");

                    b.Property<int?>("FormulaCanvasId")
                        .HasColumnType("int");

                    b.Property<string>("FormulaExpression")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GlobalDependencies")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasDefaultValue("[]");

                    b.Property<bool>("IncludeInOutput")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("InputDependencies")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasDefaultValue("[]");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsValid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsVisible")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("LastValidated")
                        .HasColumnType("datetime2");

                    b.Property<string>("LocalDependencies")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasDefaultValue("[]");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OutputDependencies")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasDefaultValue("[]");

                    b.Property<int>("QueryId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("ValidationErrors")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("IX_QueryOutput_CreatedDate");

                    b.HasIndex("FormulaCanvasId");

                    b.HasIndex("IncludeInOutput");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_QueryOutput_IsActive");

                    b.HasIndex("QueryId", "ExecutionOrder");

                    b.HasIndex("QueryId", "Name")
                        .IsUnique();

                    b.ToTable("QueryOutputs");
                });

            modelBuilder.Entity("DT_PODSystem.Models.Entities.QueryResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CalculatedValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("CalculationConfidence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime>("ExecutedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<long>("ExecutionTimeMs")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<bool>("HasFinancialData")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsApproved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsValid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("NeedApproval")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("OriginalFormula")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OutputDataType")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Number");

                    b.Property<string>("OutputName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PeriodId")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<int>("ProcessedFileId")
                        .HasColumnType("int");

                    b.Property<string>("ProcessedFormula")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QueryId")
                        .HasColumnType("int");

                    b.Property<int>("QueryOutputId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("ValidationErrors")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("IX_QueryResult_CreatedDate");

                    b.HasIndex("ExecutedDate");

                    b.HasIndex("HasFinancialData");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_QueryResult_IsActive");

                    b.HasIndex("IsApproved");

                    b.HasIndex("IsValid");

                    b.HasIndex("NeedApproval");

                    b.HasIndex("OutputName");

                    b.HasIndex("PeriodId");

                    b.HasIndex("ProcessedFileId");

                    b.HasIndex("QueryId");

                    b.HasIndex("QueryOutputId");

                    b.HasIndex("QueryId", "PeriodId");

                    b.HasIndex("QueryId", "ProcessedFileId");

                    b.ToTable("QueryResults");
                });

            modelBuilder.Entity("DT_PODSystem.Models.Entities.TemplateAnchor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BorderColor")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("#00C48C");

                    b.Property<string>("Color")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("#00C48C");

                    b.Property<decimal>("ConfidenceThreshold")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(5, 4)
                        .HasColumnType("decimal(5,4)")
                        .HasDefaultValue(0.8m);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<double>("Height")
                        .HasPrecision(18, 6)
                        .HasColumnType("float(18)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsVisible")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PageNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("ReferencePattern")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("ReferenceText")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("TemplateId")
                        .HasColumnType("int");

                    b.Property<double>("Width")
                        .HasPrecision(18, 6)
                        .HasColumnType("float(18)");

                    b.Property<double>("X")
                        .HasPrecision(18, 6)
                        .HasColumnType("float(18)");

                    b.Property<double>("Y")
                        .HasPrecision(18, 6)
                        .HasColumnType("float(18)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("IX_TemplateAnchor_CreatedDate");

                    b.HasIndex("DisplayOrder");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_TemplateAnchor_IsActive");

                    b.HasIndex("TemplateId");

                    b.HasIndex("TemplateId", "Name")
                        .IsUnique();

                    b.HasIndex("TemplateId", "PageNumber");

                    b.ToTable("TemplateAnchors");
                });

            modelBuilder.Entity("DT_PODSystem.Models.Entities.TemplateAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DisplayOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<bool>("HasFormFields")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsPrimary")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastProcessed")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PageCount")
                        .HasColumnType("int");

                    b.Property<string>("PdfVersion")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProcessingStatus")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("TemplateId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(2);

                    b.Property<int>("UploadedFileId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("IX_TemplateAttachment_CreatedDate");

                    b.HasIndex("DisplayOrder");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_TemplateAttachment_IsActive");

                    b.HasIndex("IsPrimary");

                    b.HasIndex("ProcessingStatus");

                    b.HasIndex("Type");

                    b.HasIndex("UploadedFileId");

                    b.HasIndex("TemplateId", "UploadedFileId")
                        .IsUnique();

                    b.ToTable("TemplateAttachments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 6, 23, 0, 36, 13, 750, DateTimeKind.Utc).AddTicks(285),
                            Description = "Primary template for monthly financial report processing",
                            DisplayName = "Monthly Financial Report Template",
                            DisplayOrder = 1,
                            HasFormFields = true,
                            IsActive = true,
                            IsPrimary = true,
                            PageCount = 5,
                            PdfVersion = "1.6",
                            ProcessingStatus = "Ready",
                            TemplateId = 2,
                            Type = 0,
                            UploadedFileId = 2
                        });
                });

            modelBuilder.Entity("DT_PODSystem.Models.Entities.UploadedFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileHash")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsTemporary")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("MimeType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProcessedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ProcessedDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("SavedFileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("UploadSource")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("IX_UploadedFile_CreatedDate");

                    b.HasIndex("ExpiryDate");

                    b.HasIndex("FileHash")
                        .IsUnique()
                        .HasFilter("[FileHash] IS NOT NULL");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_UploadedFile_IsActive");

                    b.HasIndex("IsTemporary");

                    b.HasIndex("OriginalFileName");

                    b.HasIndex("SavedFileName")
                        .IsUnique();

                    b.HasIndex("UploadSource");

                    b.ToTable("UploadedFiles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ContentType = "application/pdf",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 6, 8, 0, 36, 13, 750, DateTimeKind.Utc).AddTicks(5),
                            FileHash = "sha256_erp_contract_hash_001",
                            FilePath = "/uploads/documents/2025/01/erp_contract_20250101_001.pdf",
                            FileSize = 2456789L,
                            IsActive = true,
                            IsTemporary = false,
                            MimeType = "application/pdf",
                            OriginalFileName = "ERP_Contract_Main.pdf",
                            ProcessedBy = "System",
                            ProcessedDate = new DateTime(2025, 6, 8, 0, 36, 13, 750, DateTimeKind.Utc).AddTicks(1),
                            SavedFileName = "erp_contract_20250101_001.pdf",
                            UploadSource = "POD"
                        },
                        new
                        {
                            Id = 2,
                            ContentType = "application/pdf",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 6, 23, 0, 36, 13, 750, DateTimeKind.Utc).AddTicks(15),
                            FileHash = "sha256_fin_template_hash_001",
                            FilePath = "/uploads/templates/2025/01/fin_report_template_20250102_001.pdf",
                            FileSize = 1234567L,
                            IsActive = true,
                            IsTemporary = false,
                            MimeType = "application/pdf",
                            OriginalFileName = "Financial_Report_Template.pdf",
                            ProcessedBy = "System",
                            ProcessedDate = new DateTime(2025, 6, 23, 0, 36, 13, 750, DateTimeKind.Utc).AddTicks(12),
                            SavedFileName = "fin_report_template_20250102_001.pdf",
                            UploadSource = "Wizard"
                        },
                        new
                        {
                            Id = 3,
                            ContentType = "application/pdf",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 7, 23, 0, 36, 13, 750, DateTimeKind.Utc).AddTicks(23),
                            FileHash = "sha256_hr_policy_hash_001",
                            FilePath = "/uploads/documents/2025/01/hr_policy_20250103_001.pdf",
                            FileSize = 987654L,
                            IsActive = true,
                            IsTemporary = false,
                            MimeType = "application/pdf",
                            OriginalFileName = "HR_Policy_Document.pdf",
                            ProcessedBy = "System",
                            ProcessedDate = new DateTime(2025, 7, 23, 0, 36, 13, 750, DateTimeKind.Utc).AddTicks(19),
                            SavedFileName = "hr_policy_20250103_001.pdf",
                            UploadSource = "POD"
                        });
                });

            modelBuilder.Entity("DT_PODSystem.Models.Entities.Vendor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CommercialRegister")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactPerson")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsApproved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("TaxNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CommercialRegister");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("IX_Vendor_CreatedDate");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Vendor_IsActive");

                    b.HasIndex("IsApproved");

                    b.HasIndex("Name");

                    b.HasIndex("TaxNumber");

                    b.ToTable("Vendors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "King Fahd Road, Riyadh 12345, Saudi Arabia",
                            ApprovalDate = new DateTime(2025, 2, 7, 0, 36, 13, 749, DateTimeKind.Utc).AddTicks(9659),
                            ApprovedBy = "System Admin",
                            CommercialRegister = "1010123456",
                            CompanyName = "STS Co. Ltd.",
                            ContactEmail = "ahmad@sts.sa",
                            ContactPerson = "Ahmad Al-Riyadh",
                            ContactPhone = "+966-11-2345678",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 8, 7, 0, 36, 13, 749, DateTimeKind.Utc).AddTicks(9676),
                            IsActive = true,
                            IsApproved = true,
                            Name = "Saudi Technology Solutions",
                            TaxNumber = "300012345600003"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Olaya District, Riyadh 11564, Saudi Arabia",
                            ApprovalDate = new DateTime(2025, 4, 7, 0, 36, 13, 749, DateTimeKind.Utc).AddTicks(9682),
                            ApprovedBy = "Procurement Manager",
                            CommercialRegister = "1010234567",
                            CompanyName = "GCG International",
                            ContactEmail = "mariam@gcg.com",
                            ContactPerson = "Mariam Al-Khalil",
                            ContactPhone = "+966-11-3456789",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 8, 7, 0, 36, 13, 749, DateTimeKind.Utc).AddTicks(9684),
                            IsActive = true,
                            IsApproved = true,
                            Name = "Gulf Consulting Group",
                            TaxNumber = "300012345600004"
                        },
                        new
                        {
                            Id = 3,
                            Address = "King Abdullah Financial District, Riyadh 13519, Saudi Arabia",
                            ApprovalDate = new DateTime(2025, 6, 7, 0, 36, 13, 749, DateTimeKind.Utc).AddTicks(9689),
                            ApprovedBy = "IT Director",
                            CommercialRegister = "1010345678",
                            CompanyName = "DTP Solutions LLC",
                            ContactEmail = "mohammed@dtp.sa",
                            ContactPerson = "Mohammed Al-Faisal",
                            ContactPhone = "+966-11-4567890",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 8, 7, 0, 36, 13, 749, DateTimeKind.Utc).AddTicks(9691),
                            IsActive = true,
                            IsApproved = true,
                            Name = "Digital Transformation Partners",
                            TaxNumber = "300012345600005"
                        },
                        new
                        {
                            Id = 4,
                            Address = "Al-Malaz District, Riyadh 11432, Saudi Arabia",
                            CommercialRegister = "1010456789",
                            CompanyName = "ABS Company",
                            ContactEmail = "aisha@abs.sa",
                            ContactPerson = "Aisha Al-Mutairi",
                            ContactPhone = "+966-11-5678901",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 8, 7, 0, 36, 13, 749, DateTimeKind.Utc).AddTicks(9696),
                            IsActive = true,
                            IsApproved = false,
                            Name = "Arabian Business Services",
                            TaxNumber = "300012345600006"
                        },
                        new
                        {
                            Id = 5,
                            Address = "Diplomatic Quarter, Riyadh 11693, Saudi Arabia",
                            ApprovalDate = new DateTime(2025, 7, 7, 0, 36, 13, 749, DateTimeKind.Utc).AddTicks(9699),
                            ApprovedBy = "Finance Director",
                            CommercialRegister = "1010567890",
                            CompanyName = "AAC Saudi Arabia",
                            ContactEmail = "hassan@aac.sa",
                            ContactPerson = "Hassan Al-Zahrani",
                            ContactPhone = "+966-11-6789012",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 8, 7, 0, 36, 13, 749, DateTimeKind.Utc).AddTicks(9701),
                            IsActive = true,
                            IsApproved = true,
                            Name = "Advanced Analytics Corp",
                            TaxNumber = "300012345600007"
                        });
                });

            modelBuilder.Entity("DT_PODSystem.Models.Entities.Department", b =>
                {
                    b.HasOne("DT_PODSystem.Models.Entities.GeneralDirectorate", "GeneralDirectorate")
                        .WithMany("Departments")
                        .HasForeignKey("GeneralDirectorateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GeneralDirectorate");
                });

            modelBuilder.Entity("DT_PODSystem.Models.Entities.FieldMapping", b =>
                {
                    b.HasOne("DT_PODSystem.Models.Entities.PdfTemplate", "Template")
                        .WithMany("FieldMappings")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Template");
                });

            modelBuilder.Entity("DT_PODSystem.Models.Entities.FormulaCanvas", b =>
                {
                    b.HasOne("DT_PODSystem.Models.Entities.Query", "Query")
                        .WithOne("FormulaCanvas")
                        .HasForeignKey("DT_PODSystem.Models.Entities.FormulaCanvas", "QueryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Query");
                });

            modelBuilder.Entity("DT_PODSystem.Models.Entities.POD", b =>
                {
                    b.HasOne("DT_PODSystem.Models.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DT_PODSystem.Models.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DT_PODSystem.Models.Entities.Vendor", "Vendor")
                        .WithMany()
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Category");

                    b.Navigation("Department");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("DT_PODSystem.Models.Entities.PODAttachment", b =>
                {
                    b.HasOne("DT_PODSystem.Models.Entities.POD", "POD")
                        .WithMany("Attachments")
                        .HasForeignKey("PODId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DT_PODSystem.Models.Entities.UploadedFile", "UploadedFile")
                        .WithMany("PODAttachments")
                        .HasForeignKey("UploadedFileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("POD");

                    b.Navigation("UploadedFile");
                });

            modelBuilder.Entity("DT_PODSystem.Models.Entities.PdfTemplate", b =>
                {
                    b.HasOne("DT_PODSystem.Models.Entities.Category", null)
                        .WithMany("Templates")
                        .HasForeignKey("CategoryId");

                    b.HasOne("DT_PODSystem.Models.Entities.Department", null)
                        .WithMany("Templates")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("DT_PODSystem.Models.Entities.POD", "POD")
                        .WithMany("Templates")
                        .HasForeignKey("PODId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DT_PODSystem.Models.Entities.Vendor", null)
                        .WithMany("Templates")
                        .HasForeignKey("VendorId");

                    b.Navigation("POD");
                });

            modelBuilder.Entity("DT_PODSystem.Models.Entities.ProcessedField", b =>
                {
                    b.HasOne("DT_PODSystem.Models.Entities.FieldMapping", "MappedField")
                        .WithMany()
                        .HasForeignKey("FieldMappingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DT_PODSystem.Models.Entities.ProcessedFile", "ProcessedFile")
                        .WithMany("ProcessedFields")
                        .HasForeignKey("ProcessedFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MappedField");

                    b.Navigation("ProcessedFile");
                });

            modelBuilder.Entity("DT_PODSystem.Models.Entities.ProcessedFile", b =>
                {
                    b.HasOne("DT_PODSystem.Models.Entities.PdfTemplate", null)
                        .WithMany("ProcessedFiles")
                        .HasForeignKey("PdfTemplateId");

                    b.HasOne("DT_PODSystem.Models.Entities.PdfTemplate", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Template");
                });

            modelBuilder.Entity("DT_PODSystem.Models.Entities.QueryConstant", b =>
                {
                    b.HasOne("DT_PODSystem.Models.Entities.Query", "Query")
                        .WithMany("QueryConstants")
                        .HasForeignKey("QueryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Query");
                });

            modelBuilder.Entity("DT_PODSystem.Models.Entities.QueryOutput", b =>
                {
                    b.HasOne("DT_PODSystem.Models.Entities.FormulaCanvas", "FormulaCanvas")
                        .WithMany("QueryOutputs")
                        .HasForeignKey("FormulaCanvasId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DT_PODSystem.Models.Entities.Query", "Query")
                        .WithMany("QueryOutputs")
                        .HasForeignKey("QueryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormulaCanvas");

                    b.Navigation("Query");
                });

            modelBuilder.Entity("DT_PODSystem.Models.Entities.QueryResult", b =>
                {
                    b.HasOne("DT_PODSystem.Models.Entities.ProcessedFile", "ProcessedFile")
                        .WithMany()
                        .HasForeignKey("ProcessedFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DT_PODSystem.Models.Entities.Query", "Query")
                        .WithMany()
                        .HasForeignKey("QueryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DT_PODSystem.Models.Entities.QueryOutput", "QueryOutput")
                        .WithMany()
                        .HasForeignKey("QueryOutputId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProcessedFile");

                    b.Navigation("Query");

                    b.Navigation("QueryOutput");
                });

            modelBuilder.Entity("DT_PODSystem.Models.Entities.TemplateAnchor", b =>
                {
                    b.HasOne("DT_PODSystem.Models.Entities.PdfTemplate", "Template")
                        .WithMany("TemplateAnchors")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Template");
                });

            modelBuilder.Entity("DT_PODSystem.Models.Entities.TemplateAttachment", b =>
                {
                    b.HasOne("DT_PODSystem.Models.Entities.PdfTemplate", "Template")
                        .WithMany("Attachments")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DT_PODSystem.Models.Entities.UploadedFile", "UploadedFile")
                        .WithMany("TemplateAttachments")
                        .HasForeignKey("UploadedFileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Template");

                    b.Navigation("UploadedFile");
                });

            modelBuilder.Entity("DT_PODSystem.Models.Entities.Category", b =>
                {
                    b.Navigation("Templates");
                });

            modelBuilder.Entity("DT_PODSystem.Models.Entities.Department", b =>
                {
                    b.Navigation("Templates");
                });

            modelBuilder.Entity("DT_PODSystem.Models.Entities.FormulaCanvas", b =>
                {
                    b.Navigation("QueryOutputs");
                });

            modelBuilder.Entity("DT_PODSystem.Models.Entities.GeneralDirectorate", b =>
                {
                    b.Navigation("Departments");
                });

            modelBuilder.Entity("DT_PODSystem.Models.Entities.POD", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Templates");
                });

            modelBuilder.Entity("DT_PODSystem.Models.Entities.PdfTemplate", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("FieldMappings");

                    b.Navigation("ProcessedFiles");

                    b.Navigation("TemplateAnchors");
                });

            modelBuilder.Entity("DT_PODSystem.Models.Entities.ProcessedFile", b =>
                {
                    b.Navigation("ProcessedFields");
                });

            modelBuilder.Entity("DT_PODSystem.Models.Entities.Query", b =>
                {
                    b.Navigation("FormulaCanvas");

                    b.Navigation("QueryConstants");

                    b.Navigation("QueryOutputs");
                });

            modelBuilder.Entity("DT_PODSystem.Models.Entities.UploadedFile", b =>
                {
                    b.Navigation("PODAttachments");

                    b.Navigation("TemplateAttachments");
                });

            modelBuilder.Entity("DT_PODSystem.Models.Entities.Vendor", b =>
                {
                    b.Navigation("Templates");
                });
#pragma warning restore 612, 618
        }
    }
}
