// <auto-generated />
using System;
using DT_PODSystem.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DT_PODSystem.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250805011712_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DT_PODSystem.Models.Entities.AuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AdditionalData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AffectedColumns")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CorrelationId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("EntityName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<long>("ExecutionTimeMs")
                        .HasColumnType("bigint");

                    b.Property<string>("HttpMethod")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsFinancialData")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSuccess")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NewValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("RequiresApproval")
                        .HasColumnType("bit");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("SecurityLevel")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StackTrace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("IX_AuditLog_CreatedDate");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_AuditLog_IsActive");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("DT_PODSystem.Models.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ColorCode")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("#A54EE1");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("IconClass")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("fa fa-folder");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("IX_Category_CreatedDate");

                    b.HasIndex("DisplayOrder");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Category_IsActive");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ColorCode = "#A54EE1",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 8, 5, 1, 17, 11, 460, DateTimeKind.Utc).AddTicks(8372),
                            Description = "Financial and accounting related documents",
                            DisplayOrder = 1,
                            IconClass = "fa fa-dollar-sign",
                            IsActive = true,
                            Name = "MSP Certificates"
                        },
                        new
                        {
                            Id = 2,
                            ColorCode = "#4F008C",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 8, 5, 1, 17, 11, 460, DateTimeKind.Utc).AddTicks(8375),
                            Description = "Legal contracts and agreements",
                            DisplayOrder = 2,
                            IconClass = "fa fa-balance-scale",
                            IsActive = true,
                            Name = "Financial Documents"
                        },
                        new
                        {
                            Id = 3,
                            ColorCode = "#00C48C",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 8, 5, 1, 17, 11, 460, DateTimeKind.Utc).AddTicks(8377),
                            Description = "Human resources and personnel documents",
                            DisplayOrder = 3,
                            IconClass = "fa fa-users",
                            IsActive = true,
                            Name = "HR Documents"
                        },
                        new
                        {
                            Id = 4,
                            ColorCode = "#1BCED8",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 8, 5, 1, 17, 11, 460, DateTimeKind.Utc).AddTicks(8380),
                            Description = "Technical specifications and documentation",
                            DisplayOrder = 4,
                            IconClass = "fa fa-cogs",
                            IsActive = true,
                            Name = "Technical Documents"
                        });
                });

            modelBuilder.Entity("DT_PODSystem.Models.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<int>("GeneralDirectorateId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("ManagerName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("IX_Department_CreatedDate");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Department_IsActive");

                    b.HasIndex("Name");

                    b.HasIndex("GeneralDirectorateId", "DisplayOrder");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "ACC",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 8, 5, 1, 17, 11, 460, DateTimeKind.Utc).AddTicks(8612),
                            Description = "Financial accounting and reporting",
                            DisplayOrder = 1,
                            GeneralDirectorateId = 1,
                            IsActive = true,
                            Name = "TB"
                        },
                        new
                        {
                            Id = 2,
                            Code = "PROC",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 8, 5, 1, 17, 11, 460, DateTimeKind.Utc).AddTicks(8615),
                            Description = "Procurement and vendor management",
                            DisplayOrder = 2,
                            GeneralDirectorateId = 1,
                            IsActive = true,
                            Name = "SOC"
                        },
                        new
                        {
                            Id = 3,
                            Code = "DEV",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 8, 5, 1, 17, 11, 460, DateTimeKind.Utc).AddTicks(8617),
                            Description = "Software development and maintenance",
                            DisplayOrder = 1,
                            GeneralDirectorateId = 2,
                            IsActive = true,
                            Name = "NOC"
                        },
                        new
                        {
                            Id = 4,
                            Code = "INFRA",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 8, 5, 1, 17, 11, 460, DateTimeKind.Utc).AddTicks(8620),
                            Description = "IT infrastructure and security",
                            DisplayOrder = 2,
                            GeneralDirectorateId = 2,
                            IsActive = true,
                            Name = "Infrastructure"
                        },
                        new
                        {
                            Id = 5,
                            Code = "TM",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 8, 5, 1, 17, 11, 460, DateTimeKind.Utc).AddTicks(8622),
                            Description = "Talent acquisition and development",
                            DisplayOrder = 1,
                            GeneralDirectorateId = 3,
                            IsActive = true,
                            Name = "Fixed"
                        },
                        new
                        {
                            Id = 6,
                            Code = "ER",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 8, 5, 1, 17, 11, 460, DateTimeKind.Utc).AddTicks(8624),
                            Description = "Employee relations and compliance",
                            DisplayOrder = 2,
                            GeneralDirectorateId = 3,
                            IsActive = true,
                            Name = "Transport"
                        });
                });

            modelBuilder.Entity("DT_PODSystem.Models.Entities.FieldMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BorderColor")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("#A54EE1");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("DataType")
                        .HasColumnType("int");

                    b.Property<string>("DefaultValue")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("FieldName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Height")
                        .HasPrecision(18, 6)
                        .HasColumnType("float(18)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsVisible")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<decimal?>("MaxValue")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("MinValue")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OCRConfidenceThreshold")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(5, 4)
                        .HasColumnType("decimal(5,4)")
                        .HasDefaultValue(0.7m);

                    b.Property<string>("OCRLanguage")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("eng");

                    b.Property<int>("PageNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("TemplateId")
                        .HasColumnType("int");

                    b.Property<bool>("UseOCR")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("ValidationMessage")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ValidationPattern")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<double>("Width")
                        .HasPrecision(18, 6)
                        .HasColumnType("float(18)");

                    b.Property<double>("X")
                        .HasPrecision(18, 6)
                        .HasColumnType("float(18)");

                    b.Property<double>("Y")
                        .HasPrecision(18, 6)
                        .HasColumnType("float(18)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("IX_FieldMapping_CreatedDate");

                    b.HasIndex("DataType");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_FieldMapping_IsActive");

                    b.HasIndex("TemplateId", "DisplayOrder");

                    b.HasIndex("TemplateId", "FieldName")
                        .IsUnique();

                    b.HasIndex("TemplateId", "PageNumber");

                    b.ToTable("FieldMappings");
                });

            modelBuilder.Entity("DT_PODSystem.Models.Entities.FormulaCanvas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CanvasState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FormulaExpression")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Height")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(800);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsValid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastValidated")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("QueryId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("ValidationErrors")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Version")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("1.0");

                    b.Property<int>("Width")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1200);

                    b.Property<decimal>("ZoomLevel")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)")
                        .HasDefaultValue(1.0m);

                    b.HasKey("Id");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("IX_FormulaCanvas_CreatedDate");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_FormulaCanvas_IsActive");

                    b.HasIndex("QueryId")
                        .IsUnique();

                    b.ToTable("FormulaCanvases");
                });

            modelBuilder.Entity("DT_PODSystem.Models.Entities.GeneralDirectorate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("ManagerName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("IX_GeneralDirectorate_CreatedDate");

                    b.HasIndex("DisplayOrder");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_GeneralDirectorate_IsActive");

                    b.HasIndex("Name");

                    b.ToTable("GeneralDirectorates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "FA",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 8, 5, 1, 17, 11, 460, DateTimeKind.Utc).AddTicks(8575),
                            Description = "Financial management and administrative services",
                            DisplayOrder = 1,
                            IsActive = true,
                            Name = "Finance and Administration"
                        },
                        new
                        {
                            Id = 2,
                            Code = "IT",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 8, 5, 1, 17, 11, 460, DateTimeKind.Utc).AddTicks(8578),
                            Description = "Information technology services and infrastructure",
                            DisplayOrder = 2,
                            IsActive = true,
                            Name = "Information Technology"
                        },
                        new
                        {
                            Id = 3,
                            Code = "HR",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 8, 5, 1, 17, 11, 460, DateTimeKind.Utc).AddTicks(8580),
                            Description = "Human resources and organizational development",
                            DisplayOrder = 3,
                            IsActive = true,
                            Name = "Human Resources"
                        },
                        new
                        {
                            Id = 4,
                            Code = "OPS",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 8, 5, 1, 17, 11, 460, DateTimeKind.Utc).AddTicks(8582),
                            Description = "Operational activities and service delivery",
                            DisplayOrder = 4,
                            IsActive = true,
                            Name = "Operations"
                        });
                });

            modelBuilder.Entity("DT_PODSystem.Models.Entities.PdfTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsFinancialData")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastProcessedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NamingConvention")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ProcessedCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("ProcessingPriority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(5);

                    b.Property<bool>("RequiresApproval")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int?>("VendorId")
                        .HasColumnType("int");

                    b.Property<string>("Version")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("IX_PdfTemplate_CreatedDate");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_PdfTemplate_IsActive");

                    b.HasIndex("IsFinancialData");

                    b.HasIndex("Name");

                    b.HasIndex("Status");

                    b.HasIndex("VendorId");

                    b.ToTable("PdfTemplates");
                });

            modelBuilder.Entity("DT_PODSystem.Models.Entities.Query", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("ExecutionCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("ExecutionPriority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(5);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("LastExecutedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Version")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("1.0");

                    b.HasKey("Id");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("IX_Query_CreatedDate");

                    b.HasIndex("ExecutionPriority");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Query_IsActive");

                    b.HasIndex("Name");

                    b.HasIndex("Status");

                    b.ToTable("Queries");
                });

            modelBuilder.Entity("DT_PODSystem.Models.Entities.QueryConstant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("DataType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("DefaultValue")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("InputType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsConstant")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsGlobal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("QueryId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("SelectOptions")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("SystemSource")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ValidationMessage")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ValidationPattern")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("IX_QueryConstant_CreatedDate");

                    b.HasIndex("DisplayOrder");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_QueryConstant_IsActive");

                    b.HasIndex("IsConstant");

                    b.HasIndex("IsGlobal");

                    b.HasIndex("QueryId", "Name")
                        .IsUnique()
                        .HasFilter("[QueryId] IS NOT NULL");

                    b.ToTable("QueryConstants");
                });

            modelBuilder.Entity("DT_PODSystem.Models.Entities.QueryOutput", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CurrencySymbol")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("DataType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int>("DecimalPlaces")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(2);

                    b.Property<string>("DefaultValue")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DisplayOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("ExecutionOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("FormatString")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("N2");

                    b.Property<int?>("FormulaCanvasId")
                        .HasColumnType("int");

                    b.Property<string>("FormulaExpression")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GlobalDependencies")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasDefaultValue("[]");

                    b.Property<bool>("IncludeInOutput")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("InputDependencies")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasDefaultValue("[]");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsValid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsVisible")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("LastValidated")
                        .HasColumnType("datetime2");

                    b.Property<string>("LocalDependencies")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasDefaultValue("[]");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OutputDependencies")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasDefaultValue("[]");

                    b.Property<int>("QueryId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("ValidationErrors")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("IX_QueryOutput_CreatedDate");

                    b.HasIndex("FormulaCanvasId");

                    b.HasIndex("IncludeInOutput");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_QueryOutput_IsActive");

                    b.HasIndex("QueryId", "ExecutionOrder");

                    b.HasIndex("QueryId", "Name")
                        .IsUnique();

                    b.ToTable("QueryOutputs");
                });

            modelBuilder.Entity("DT_PODSystem.Models.Entities.QueryResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CalculatedValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("CalculationConfidence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime>("ExecutedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<long>("ExecutionTimeMs")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<bool>("HasFinancialData")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsApproved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsValid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("NeedApproval")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("OriginalFormula")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OutputDataType")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Number");

                    b.Property<string>("OutputName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PeriodId")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<int>("ProcessedFileId")
                        .HasColumnType("int");

                    b.Property<string>("ProcessedFormula")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QueryId")
                        .HasColumnType("int");

                    b.Property<int>("QueryOutputId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("ValidationErrors")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("IX_QueryResult_CreatedDate");

                    b.HasIndex("ExecutedDate");

                    b.HasIndex("HasFinancialData");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_QueryResult_IsActive");

                    b.HasIndex("IsApproved");

                    b.HasIndex("IsValid");

                    b.HasIndex("NeedApproval");

                    b.HasIndex("OutputName");

                    b.HasIndex("PeriodId");

                    b.HasIndex("ProcessedFileId");

                    b.HasIndex("QueryId");

                    b.HasIndex("QueryOutputId");

                    b.HasIndex("QueryId", "PeriodId");

                    b.HasIndex("QueryId", "ProcessedFileId");

                    b.ToTable("QueryResults");
                });

            modelBuilder.Entity("DT_PODSystem.Models.Entities.TemplateAnchor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BorderColor")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("#00C48C");

                    b.Property<string>("Color")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("#00C48C");

                    b.Property<decimal>("ConfidenceThreshold")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(5, 4)
                        .HasColumnType("decimal(5,4)")
                        .HasDefaultValue(0.8m);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<double>("Height")
                        .HasPrecision(18, 6)
                        .HasColumnType("float(18)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsVisible")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PageNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("ReferencePattern")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("ReferenceText")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("TemplateId")
                        .HasColumnType("int");

                    b.Property<double>("Width")
                        .HasPrecision(18, 6)
                        .HasColumnType("float(18)");

                    b.Property<double>("X")
                        .HasPrecision(18, 6)
                        .HasColumnType("float(18)");

                    b.Property<double>("Y")
                        .HasPrecision(18, 6)
                        .HasColumnType("float(18)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("IX_TemplateAnchor_CreatedDate");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_TemplateAnchor_IsActive");

                    b.HasIndex("TemplateId");

                    b.HasIndex("TemplateId", "DisplayOrder");

                    b.HasIndex("TemplateId", "Name")
                        .IsUnique();

                    b.HasIndex("TemplateId", "PageNumber");

                    b.ToTable("TemplateAnchors");
                });

            modelBuilder.Entity("DT_PODSystem.Models.Entities.TemplateAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DisplayOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("FilePath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("HasFormFields")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsPrimary")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OriginalFileName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("PageCount")
                        .HasColumnType("int");

                    b.Property<string>("PdfVersion")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("SavedFileName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("TemplateId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("UploadedFileId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("IX_TemplateAttachment_CreatedDate");

                    b.HasIndex("DisplayOrder");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_TemplateAttachment_IsActive");

                    b.HasIndex("IsPrimary");

                    b.HasIndex("Type");

                    b.HasIndex("UploadedFileId");

                    b.HasIndex("TemplateId", "UploadedFileId");

                    b.ToTable("TemplateAttachments");
                });

            modelBuilder.Entity("DT_PODSystem.Models.Entities.UploadedFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("FileHash")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsTemporary")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProcessedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ProcessedDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("SavedFileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("IX_UploadedFile_CreatedDate");

                    b.HasIndex("FileHash");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_UploadedFile_IsActive");

                    b.HasIndex("IsTemporary");

                    b.HasIndex("OriginalFileName");

                    b.HasIndex("SavedFileName");

                    b.ToTable("UploadedFiles");
                });

            modelBuilder.Entity("DT_PODSystem.Models.Entities.Vendor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CommercialRegister")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactPerson")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsApproved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("TaxNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CommercialRegister");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("IX_Vendor_CreatedDate");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Vendor_IsActive");

                    b.HasIndex("IsApproved");

                    b.HasIndex("Name");

                    b.HasIndex("TaxNumber");

                    b.ToTable("Vendors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApprovalDate = new DateTime(2025, 7, 6, 1, 17, 11, 460, DateTimeKind.Utc).AddTicks(8658),
                            ApprovedBy = "System",
                            Code = "TSL001",
                            CommercialRegister = "1010123456",
                            CompanyName = "Nokia",
                            ContactEmail = "ahmed@nokia.sa",
                            ContactPerson = "Ahmed Al-Rashid",
                            ContactPhone = "+96650112367",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 6, 21, 1, 17, 11, 460, DateTimeKind.Utc).AddTicks(8672),
                            IsActive = true,
                            IsApproved = true,
                            Name = "Nokia",
                            TaxNumber = "300123456789003"
                        },
                        new
                        {
                            Id = 2,
                            ApprovalDate = new DateTime(2025, 7, 21, 1, 17, 11, 460, DateTimeKind.Utc).AddTicks(8676),
                            ApprovedBy = "System",
                            Code = "GSC002",
                            CommercialRegister = "1010234567",
                            CompanyName = "Ericsson Company",
                            ContactEmail = "sali@Ericsson.sa",
                            ContactPerson = "Fatima Al-Zahra",
                            ContactPhone = "+966542345678",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2025, 7, 16, 1, 17, 11, 460, DateTimeKind.Utc).AddTicks(8677),
                            IsActive = true,
                            IsApproved = true,
                            Name = "Ericsson",
                            TaxNumber = "300234567890003"
                        },
                        new
                        {
                            Id = 3,
                            ApprovalDate = new DateTime(2025, 7, 21, 1, 17, 11, 460, DateTimeKind.Utc).AddTicks(8680),
                            ApprovedBy = "System",
                            Code = "GSC003",
                            CommercialRegister = "1010234567",
                            CompanyName = "Huawei Company",
                            ContactEmail = "fatima@Huawei.sa",
                            ContactPerson = "Fatima Al-Zahra",
                            ContactPhone = "+966509945678",
                            CreatedBy = "",
                            CreatedDate = new DateTime(2025, 7, 16, 1, 17, 11, 460, DateTimeKind.Utc).AddTicks(8681),
                            IsActive = true,
                            IsApproved = true,
                            Name = "Huawei",
                            TaxNumber = "300234567890003"
                        },
                        new
                        {
                            Id = 4,
                            ApprovalDate = new DateTime(2025, 7, 21, 1, 17, 11, 460, DateTimeKind.Utc).AddTicks(8684),
                            ApprovedBy = "System",
                            Code = "GSC004",
                            CommercialRegister = "1010234567",
                            CompanyName = "Cisco Company",
                            ContactEmail = "mohammad@cisco.sa",
                            ContactPerson = "Fatima Al-Zahra",
                            ContactPhone = "+966502340078",
                            CreatedBy = "",
                            CreatedDate = new DateTime(2025, 7, 16, 1, 17, 11, 460, DateTimeKind.Utc).AddTicks(8684),
                            IsActive = true,
                            IsApproved = true,
                            Name = "Cisco",
                            TaxNumber = "300234567890003"
                        });
                });

            modelBuilder.Entity("ED.DocManagerWorker.Models.ProcessedField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("CalculationConfidence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CurrencySymbol")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("DecimalPlaces")
                        .HasColumnType("int");

                    b.Property<decimal>("ExtractionConfidence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<int>("FieldMappingId")
                        .HasColumnType("int");

                    b.Property<string>("FieldName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsValid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OutputDataType")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("String");

                    b.Property<string>("OutputValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProcessedFileId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("ValidationErrors")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("IX_ProcessedField_CreatedDate");

                    b.HasIndex("FieldMappingId");

                    b.HasIndex("FieldName");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_ProcessedField_IsActive");

                    b.HasIndex("IsValid");

                    b.HasIndex("OutputDataType");

                    b.HasIndex("ProcessedFileId");

                    b.ToTable("ProcessedFields");
                });

            modelBuilder.Entity("ED.DocManagerWorker.Models.ProcessedFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AnchorConfidence")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("AnchorDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AnchorsConfigured")
                        .HasColumnType("int");

                    b.Property<int>("AnchorsFound")
                        .HasColumnType("int");

                    b.Property<int>("AnchorsMatched")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("HasFinancialInfo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("NeedApproval")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("OrganizedFilePath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("OriginalFilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("PdfTemplateId")
                        .HasColumnType("int");

                    b.Property<string>("PeriodId")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<DateTime>("ProcessedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("ProcessingMessage")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Pending");

                    b.Property<int>("TemplateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("IX_ProcessedFile_CreatedDate");

                    b.HasIndex("HasFinancialInfo");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_ProcessedFile_IsActive");

                    b.HasIndex("NeedApproval");

                    b.HasIndex("PdfTemplateId");

                    b.HasIndex("PeriodId");

                    b.HasIndex("ProcessedDate");

                    b.HasIndex("Status");

                    b.HasIndex("TemplateId");

                    b.HasIndex("TemplateId", "PeriodId");

                    b.ToTable("ProcessedFiles");
                });

            modelBuilder.Entity("DT_PODSystem.Models.Entities.Department", b =>
                {
                    b.HasOne("DT_PODSystem.Models.Entities.GeneralDirectorate", "GeneralDirectorate")
                        .WithMany("Departments")
                        .HasForeignKey("GeneralDirectorateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GeneralDirectorate");
                });

            modelBuilder.Entity("DT_PODSystem.Models.Entities.FieldMapping", b =>
                {
                    b.HasOne("DT_PODSystem.Models.Entities.PdfTemplate", "Template")
                        .WithMany("FieldMappings")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Template");
                });

            modelBuilder.Entity("DT_PODSystem.Models.Entities.FormulaCanvas", b =>
                {
                    b.HasOne("DT_PODSystem.Models.Entities.Query", "Query")
                        .WithOne("FormulaCanvas")
                        .HasForeignKey("DT_PODSystem.Models.Entities.FormulaCanvas", "QueryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Query");
                });

            modelBuilder.Entity("DT_PODSystem.Models.Entities.PdfTemplate", b =>
                {
                    b.HasOne("DT_PODSystem.Models.Entities.Category", "Category")
                        .WithMany("Templates")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DT_PODSystem.Models.Entities.Department", "Department")
                        .WithMany("Templates")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DT_PODSystem.Models.Entities.Vendor", "Vendor")
                        .WithMany("Templates")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Category");

                    b.Navigation("Department");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("DT_PODSystem.Models.Entities.QueryConstant", b =>
                {
                    b.HasOne("DT_PODSystem.Models.Entities.Query", "Query")
                        .WithMany("QueryConstants")
                        .HasForeignKey("QueryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Query");
                });

            modelBuilder.Entity("DT_PODSystem.Models.Entities.QueryOutput", b =>
                {
                    b.HasOne("DT_PODSystem.Models.Entities.FormulaCanvas", "FormulaCanvas")
                        .WithMany("QueryOutputs")
                        .HasForeignKey("FormulaCanvasId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DT_PODSystem.Models.Entities.Query", "Query")
                        .WithMany("QueryOutputs")
                        .HasForeignKey("QueryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormulaCanvas");

                    b.Navigation("Query");
                });

            modelBuilder.Entity("DT_PODSystem.Models.Entities.QueryResult", b =>
                {
                    b.HasOne("ED.DocManagerWorker.Models.ProcessedFile", "ProcessedFile")
                        .WithMany()
                        .HasForeignKey("ProcessedFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DT_PODSystem.Models.Entities.Query", "Query")
                        .WithMany()
                        .HasForeignKey("QueryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DT_PODSystem.Models.Entities.QueryOutput", "QueryOutput")
                        .WithMany()
                        .HasForeignKey("QueryOutputId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProcessedFile");

                    b.Navigation("Query");

                    b.Navigation("QueryOutput");
                });

            modelBuilder.Entity("DT_PODSystem.Models.Entities.TemplateAnchor", b =>
                {
                    b.HasOne("DT_PODSystem.Models.Entities.PdfTemplate", "Template")
                        .WithMany("TemplateAnchors")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Template");
                });

            modelBuilder.Entity("DT_PODSystem.Models.Entities.TemplateAttachment", b =>
                {
                    b.HasOne("DT_PODSystem.Models.Entities.PdfTemplate", "Template")
                        .WithMany("Attachments")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DT_PODSystem.Models.Entities.UploadedFile", "UploadedFile")
                        .WithMany("TemplateAttachments")
                        .HasForeignKey("UploadedFileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Template");

                    b.Navigation("UploadedFile");
                });

            modelBuilder.Entity("ED.DocManagerWorker.Models.ProcessedField", b =>
                {
                    b.HasOne("DT_PODSystem.Models.Entities.FieldMapping", "MappedField")
                        .WithMany()
                        .HasForeignKey("FieldMappingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ED.DocManagerWorker.Models.ProcessedFile", "ProcessedFile")
                        .WithMany("ProcessedFields")
                        .HasForeignKey("ProcessedFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MappedField");

                    b.Navigation("ProcessedFile");
                });

            modelBuilder.Entity("ED.DocManagerWorker.Models.ProcessedFile", b =>
                {
                    b.HasOne("DT_PODSystem.Models.Entities.PdfTemplate", null)
                        .WithMany("ProcessedFiles")
                        .HasForeignKey("PdfTemplateId");

                    b.HasOne("DT_PODSystem.Models.Entities.PdfTemplate", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Template");
                });

            modelBuilder.Entity("DT_PODSystem.Models.Entities.Category", b =>
                {
                    b.Navigation("Templates");
                });

            modelBuilder.Entity("DT_PODSystem.Models.Entities.Department", b =>
                {
                    b.Navigation("Templates");
                });

            modelBuilder.Entity("DT_PODSystem.Models.Entities.FormulaCanvas", b =>
                {
                    b.Navigation("QueryOutputs");
                });

            modelBuilder.Entity("DT_PODSystem.Models.Entities.GeneralDirectorate", b =>
                {
                    b.Navigation("Departments");
                });

            modelBuilder.Entity("DT_PODSystem.Models.Entities.PdfTemplate", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("FieldMappings");

                    b.Navigation("ProcessedFiles");

                    b.Navigation("TemplateAnchors");
                });

            modelBuilder.Entity("DT_PODSystem.Models.Entities.Query", b =>
                {
                    b.Navigation("FormulaCanvas");

                    b.Navigation("QueryConstants");

                    b.Navigation("QueryOutputs");
                });

            modelBuilder.Entity("DT_PODSystem.Models.Entities.UploadedFile", b =>
                {
                    b.Navigation("TemplateAttachments");
                });

            modelBuilder.Entity("DT_PODSystem.Models.Entities.Vendor", b =>
                {
                    b.Navigation("Templates");
                });

            modelBuilder.Entity("ED.DocManagerWorker.Models.ProcessedFile", b =>
                {
                    b.Navigation("ProcessedFields");
                });
#pragma warning restore 612, 618
        }
    }
}
